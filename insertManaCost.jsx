function insertManaCost(inputString){

var rgbW = [252, 254, 219];
var rgbU = [169, 223, 249];
var rgbB = [199, 201, 190];
var rgbR = [243, 146, 114];
var rgbG = [155, 209, 177];

var symbolsList = ["{T}","{X}","{0}","{1}","{2}","{3}","{4}","{5}","{6}","{7}","{8}","{9}","{W}","{U}","{B}","{R}","{G}","{C}"];
var newSymbols  = ["ot", "ox", "o0", "o1", "o2", "o3", "o4", "o5", "o6", "o7", "o8", "o9", "ow", "ou", "ob", "or", "og", "OC" ]
var symbolIndices = [];

// Find all instances of mana symbols in the text and replace them
for(var i=0;i<symbolsList.length;i++){
  for(var q=0;q<10;q++){
    var indexOfThing = inputString.indexOf(symbolsList[i]);
    if(indexOfThing >= 0){
      inputString = inputString.replace(symbolsList[i], newSymbols[i]);
      symbolIndices.push(indexOfThing);
    }
  }
}

// =======================================================
// Select the Mana Cost layer
var idslct = charIDToTypeID( "slct" );
    var desc328 = new ActionDescriptor();
    var idnull = charIDToTypeID( "null" );
        var ref43 = new ActionReference();
        var idLyr = charIDToTypeID( "Lyr " );
        ref43.putName( idLyr, "Mana Cost" );
    desc328.putReference( idnull, ref43 );
    var idMkVs = charIDToTypeID( "MkVs" );
    desc328.putBoolean( idMkVs, false );
executeAction( idslct, desc328, DialogModes.NO );

// =======================================================
// Prepare some things to allow us to edit the layer
var idsetd = charIDToTypeID( "setd" );
    var desc329 = new ActionDescriptor();
    var idnull = charIDToTypeID( "null" );
        var ref44 = new ActionReference();
        var idTxLr = charIDToTypeID( "TxLr" );
        var idOrdn = charIDToTypeID( "Ordn" );
        var idTrgt = charIDToTypeID( "Trgt" );
        ref44.putEnumerated( idTxLr, idOrdn, idTrgt );
    desc329.putReference( idnull, ref44 );
    var idT = charIDToTypeID( "T   " );
        var desc330 = new ActionDescriptor();
        var idTxt = charIDToTypeID( "Txt " );
        // Mana Cost -> Mou Cost
        desc330.putString( idTxt, inputString );
        var idwarp = stringIDToTypeID( "warp" );
            var desc331 = new ActionDescriptor();
            var idwarpStyle = stringIDToTypeID( "warpStyle" );
            var idwarpStyle = stringIDToTypeID( "warpStyle" );
            var idwarpNone = stringIDToTypeID( "warpNone" );
            desc331.putEnumerated( idwarpStyle, idwarpStyle, idwarpNone );
            var idwarpValue = stringIDToTypeID( "warpValue" );
            desc331.putDouble( idwarpValue, 0.000000 );
            var idwarpPerspective = stringIDToTypeID( "warpPerspective" );
            desc331.putDouble( idwarpPerspective, 0.000000 );
            var idwarpPerspectiveOther = stringIDToTypeID( "warpPerspectiveOther" );
            desc331.putDouble( idwarpPerspectiveOther, 0.000000 );
            var idwarpRotate = stringIDToTypeID( "warpRotate" );
            var idOrnt = charIDToTypeID( "Ornt" );
            var idHrzn = charIDToTypeID( "Hrzn" );
            desc331.putEnumerated( idwarpRotate, idOrnt, idHrzn );
        var idwarp = stringIDToTypeID( "warp" );
        desc330.putObject( idwarp, idwarp, desc331 );
        var idtextGridding = stringIDToTypeID( "textGridding" );
        var idtextGridding = stringIDToTypeID( "textGridding" );
        var idNone = charIDToTypeID( "None" );
        desc330.putEnumerated( idtextGridding, idtextGridding, idNone );
        var idOrnt = charIDToTypeID( "Ornt" );
        var idOrnt = charIDToTypeID( "Ornt" );
        var idHrzn = charIDToTypeID( "Hrzn" );
        desc330.putEnumerated( idOrnt, idOrnt, idHrzn );
        var idAntA = charIDToTypeID( "AntA" );
        var idAnnt = charIDToTypeID( "Annt" );
        var idAnSt = charIDToTypeID( "AnSt" );
        desc330.putEnumerated( idAntA, idAnnt, idAnSt );
        var idtextShape = stringIDToTypeID( "textShape" );
            var list30 = new ActionList();
                var desc332 = new ActionDescriptor();
                var idTEXT = charIDToTypeID( "TEXT" );
                var idTEXT = charIDToTypeID( "TEXT" );
                var idPnt = charIDToTypeID( "Pnt " );
                desc332.putEnumerated( idTEXT, idTEXT, idPnt );
                var idOrnt = charIDToTypeID( "Ornt" );
                var idOrnt = charIDToTypeID( "Ornt" );
                var idHrzn = charIDToTypeID( "Hrzn" );
                desc332.putEnumerated( idOrnt, idOrnt, idHrzn );
                var idTrnf = charIDToTypeID( "Trnf" );
                    var desc333 = new ActionDescriptor();
                    var idxx = stringIDToTypeID( "xx" );
                    desc333.putDouble( idxx, 1.000000 );
                    var idxy = stringIDToTypeID( "xy" );
                    desc333.putDouble( idxy, 0.000000 );
                    var idyx = stringIDToTypeID( "yx" );
                    desc333.putDouble( idyx, 0.000000 );
                    var idyy = stringIDToTypeID( "yy" );
                    desc333.putDouble( idyy, 1.000000 );
                    var idtx = stringIDToTypeID( "tx" );
                    desc333.putDouble( idtx, 0.000000 );
                    var idty = stringIDToTypeID( "ty" );
                    desc333.putDouble( idty, 0.000000 );
                var idTrnf = charIDToTypeID( "Trnf" );
                desc332.putObject( idTrnf, idTrnf, desc333 );
                var idrowCount = stringIDToTypeID( "rowCount" );
                desc332.putInteger( idrowCount, 1 );
                var idcolumnCount = stringIDToTypeID( "columnCount" );
                desc332.putInteger( idcolumnCount, 1 );
                var idrowMajorOrder = stringIDToTypeID( "rowMajorOrder" );
                desc332.putBoolean( idrowMajorOrder, true );
                var idrowGutter = stringIDToTypeID( "rowGutter" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc332.putUnitDouble( idrowGutter, idPnt, 0.000000 );
                var idcolumnGutter = stringIDToTypeID( "columnGutter" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc332.putUnitDouble( idcolumnGutter, idPnt, 0.000000 );
                var idSpcn = charIDToTypeID( "Spcn" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc332.putUnitDouble( idSpcn, idPnt, 0.000000 );
                var idframeBaselineAlignment = stringIDToTypeID( "frameBaselineAlignment" );
                var idframeBaselineAlignment = stringIDToTypeID( "frameBaselineAlignment" );
                var idalignByAscent = stringIDToTypeID( "alignByAscent" );
                desc332.putEnumerated( idframeBaselineAlignment, idframeBaselineAlignment, idalignByAscent );
                var idfirstBaselineMinimum = stringIDToTypeID( "firstBaselineMinimum" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc332.putUnitDouble( idfirstBaselineMinimum, idPnt, 0.000000 );
                var idbase = stringIDToTypeID( "base" );
                    var desc334 = new ActionDescriptor();
                    var idHrzn = charIDToTypeID( "Hrzn" );
                    desc334.putDouble( idHrzn, 0.000000 );
                    var idVrtc = charIDToTypeID( "Vrtc" );
                    desc334.putDouble( idVrtc, 0.000000 );
                var idPnt = charIDToTypeID( "Pnt " );
                desc332.putObject( idbase, idPnt, desc334 );
            var idtextShape = stringIDToTypeID( "textShape" );
            list30.putObject( idtextShape, desc332 );
        desc330.putList( idtextShape, list30 );

        // ------------------------------ Loop Here ------------------------------
        var originIndex = 0;
        // Initialise desc variables
        var desc335 = [];
        var desc336 = [];
        var desc337 = [];
        var desc338 = [];
        var desc339 = [];
        var desc340 = [];
        var desc341 = [];
        var desc342 = [];
        var desc343 = [];
        var desc344 = [];
        var desc345 = [];
        var desc346 = [];
        //alert(inputString);
        for(var i=0;i<symbolIndices.length;i++){
          // Select the correct RGB code
          // Assume black
          var rgbValue = rgbB;

          // If white
          if(inputString.slice(symbolIndices[i]+1, symbolIndices[i]+2) == "w"){
            rgbValue = rgbW;
          }
          // else if blue
          else if(inputString.slice(symbolIndices[i]+1, symbolIndices[i]+2) == "u"){
            rgbValue = rgbU;
          }
          // else if red
          else if(inputString.slice(symbolIndices[i]+1, symbolIndices[i]+2) == "r"){
            rgbValue = rgbR;
          }
          // else if green
          else if(inputString.slice(symbolIndices[i]+1, symbolIndices[i]+2) == "g"){
            rgbValue = rgbG;
          }

          var idTxtt = charIDToTypeID( "Txtt" );
              // Don't initialise this variable if we're past the first iteraiton
              if(i>0){
                list31.putObject( idTxtt, desc343[i-1] );
              }
              else{
                var list31 = new ActionList();
              }

              if(inputString.slice(symbolIndices[i]+1, symbolIndices[i]+2) == "O" || inputString.slice(symbolIndices[i]+1, symbolIndices[i]+2) == "C"){
                var selectedFont = "MTG2016";
              }
              else{
                selectedFont = "MagicSymbols2008"
              }

                  // desc335[desc335.length] = new ActionDescriptor();
                  desc335[desc335.length] = new ActionDescriptor();
                  var idFrom = charIDToTypeID( "From" );
                  desc335[i].putInteger( idFrom, originIndex );   // Initialise as zero and change
                  var idT = charIDToTypeID( "T   " );          // as more symbols are included
                  desc335[i].putInteger( idT, symbolIndices[i] ); // Replace with starting index of first symbol
                  var idTxtS = charIDToTypeID( "TxtS" );
                      desc336[desc336.length] = new ActionDescriptor();
                      var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                      desc336[i].putBoolean( idstyleSheetHasParent, true );
                      var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                      desc336[i].putString( idfontPostScriptName, "MPlantin" );
                      var idFntN = charIDToTypeID( "FntN" );
                      desc336[i].putString( idFntN, "MPlantin" );
                      var idFntS = charIDToTypeID( "FntS" );
                      desc336[i].putString( idFntS, "Regular" );
                      var idScrp = charIDToTypeID( "Scrp" );
                      desc336[i].putInteger( idScrp, 0 );
                      var idFntT = charIDToTypeID( "FntT" );
                      desc336[i].putInteger( idFntT, 1 );
                      var idSz = charIDToTypeID( "Sz  " );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc336[i].putUnitDouble( idSz, idPnt, 74.990623 );
                      var idHrzS = charIDToTypeID( "HrzS" );
                      desc336[i].putDouble( idHrzS, 100.000000 );
                      var idVrtS = charIDToTypeID( "VrtS" );
                      desc336[i].putDouble( idVrtS, 100.000000 );
                      var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                      desc336[i].putBoolean( idsyntheticBold, false );
                      var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                      desc336[i].putBoolean( idsyntheticItalic, false );
                      var idautoLeading = stringIDToTypeID( "autoLeading" );
                      desc336[i].putBoolean( idautoLeading, true );
                      var idTrck = charIDToTypeID( "Trck" );
                      desc336[i].putInteger( idTrck, 0 );
                      var idBsln = charIDToTypeID( "Bsln" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc336[i].putUnitDouble( idBsln, idPnt, 0.000000 );
                      var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                      desc336[i].putDouble( idcharacterRotation, 0.000000 );
                      var idAtKr = charIDToTypeID( "AtKr" );
                      var idAtKr = charIDToTypeID( "AtKr" );
                      var idmetricsKern = stringIDToTypeID( "metricsKern" );
                      desc336[i].putEnumerated( idAtKr, idAtKr, idmetricsKern );
                      var idfontCaps = stringIDToTypeID( "fontCaps" );
                      var idfontCaps = stringIDToTypeID( "fontCaps" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc336[i].putEnumerated( idfontCaps, idfontCaps, idNrml );
                      var idbaseline = stringIDToTypeID( "baseline" );
                      var idbaseline = stringIDToTypeID( "baseline" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc336[i].putEnumerated( idbaseline, idbaseline, idNrml );
                      var idotbaseline = stringIDToTypeID( "otbaseline" );
                      var idotbaseline = stringIDToTypeID( "otbaseline" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc336[i].putEnumerated( idotbaseline, idotbaseline, idNrml );
                      var idstrikethrough = stringIDToTypeID( "strikethrough" );
                      var idstrikethrough = stringIDToTypeID( "strikethrough" );
                      var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                      desc336[i].putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                      var idUndl = charIDToTypeID( "Undl" );
                      var idUndl = charIDToTypeID( "Undl" );
                      var idunderlineOff = stringIDToTypeID( "underlineOff" );
                      desc336[i].putEnumerated( idUndl, idUndl, idunderlineOff );
                      var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc336[i].putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                      var idligature = stringIDToTypeID( "ligature" );
                      desc336[i].putBoolean( idligature, true );
                      var idaltligature = stringIDToTypeID( "altligature" );
                      desc336[i].putBoolean( idaltligature, false );
                      var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                      desc336[i].putBoolean( idcontextualLigatures, true );
                      var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                      desc336[i].putBoolean( idalternateLigatures, false );
                      var idoldStyle = stringIDToTypeID( "oldStyle" );
                      desc336[i].putBoolean( idoldStyle, false );
                      var idfractions = stringIDToTypeID( "fractions" );
                      desc336[i].putBoolean( idfractions, false );
                      var idordinals = stringIDToTypeID( "ordinals" );
                      desc336[i].putBoolean( idordinals, false );
                      var idswash = stringIDToTypeID( "swash" );
                      desc336[i].putBoolean( idswash, false );
                      var idtitling = stringIDToTypeID( "titling" );
                      desc336[i].putBoolean( idtitling, false );
                      var idconnectionForms = stringIDToTypeID( "connectionForms" );
                      desc336[i].putBoolean( idconnectionForms, true );
                      var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                      desc336[i].putBoolean( idstylisticAlternates, false );
                      var idornaments = stringIDToTypeID( "ornaments" );
                      desc336[i].putBoolean( idornaments, false );
                      var idfigureStyle = stringIDToTypeID( "figureStyle" );
                      var idfigureStyle = stringIDToTypeID( "figureStyle" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc336[i].putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                      var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                      desc336[i].putBoolean( idproportionalMetrics, false );
                      var idkana = stringIDToTypeID( "kana" );
                      desc336[i].putBoolean( idkana, false );
                      var iditalics = stringIDToTypeID( "italics" );
                      desc336[i].putBoolean( iditalics, false );
                      var idruby = stringIDToTypeID( "ruby" );
                      desc336[i].putBoolean( idruby, false );
                      var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                      var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                      var idwithStream = stringIDToTypeID( "withStream" );
                      desc336[i].putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
                      var idtextLanguage = stringIDToTypeID( "textLanguage" );
                      var idtextLanguage = stringIDToTypeID( "textLanguage" );
                      var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                      desc336[i].putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                      var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                      var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                      var iddefaultForm = stringIDToTypeID( "defaultForm" );
                      desc336[i].putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
                      var idmojiZume = stringIDToTypeID( "mojiZume" );
                      desc336[i].putDouble( idmojiZume, 0.000000 );
                      var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                      var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                      var idroman = stringIDToTypeID( "roman" );
                      desc336[i].putEnumerated( idgridAlignment, idgridAlignment, idroman );
                      var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                      desc336[i].putBoolean( idenableWariChu, false );
                      var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                      desc336[i].putInteger( idwariChuCount, 2 );
                      var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                      desc336[i].putInteger( idwariChuLineGap, 0 );
                      var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                      desc336[i].putDouble( idwariChuScale, 0.500000 );
                      var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                      desc336[i].putInteger( idwariChuWidow, 2 );
                      var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                      desc336[i].putInteger( idwariChuOrphan, 2 );
                      var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                      var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                      var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                      desc336[i].putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                      var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                      desc336[i].putInteger( idtcyUpDown, 0 );
                      var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                      desc336[i].putInteger( idtcyLeftRight, 0 );
                      var idleftAki = stringIDToTypeID( "leftAki" );
                      desc336[i].putDouble( idleftAki, -1.000000 );
                      var idrightAki = stringIDToTypeID( "rightAki" );
                      desc336[i].putDouble( idrightAki, -1.000000 );
                      var idjiDori = stringIDToTypeID( "jiDori" );
                      desc336[i].putInteger( idjiDori, 0 );
                      var idnoBreak = stringIDToTypeID( "noBreak" );
                      desc336[i].putBoolean( idnoBreak, false );
                      var idClr = charIDToTypeID( "Clr " );
                          desc337[desc337.length] = new ActionDescriptor();
                          var idRd = charIDToTypeID( "Rd  " );
                          desc337[i].putDouble( idRd, 0.000000 );
                          var idGrn = charIDToTypeID( "Grn " );
                          desc337[i].putDouble( idGrn, 0.000000 );
                          var idBl = charIDToTypeID( "Bl  " );
                          desc337[i].putDouble( idBl, 0.000000 );
                      var idRGBC = charIDToTypeID( "RGBC" );
                      desc336[i].putObject( idClr, idRGBC, desc337[i] );
                      var idstrokeColor = stringIDToTypeID( "strokeColor" );
                          desc338[desc338.length] = new ActionDescriptor();
                          var idRd = charIDToTypeID( "Rd  " );
                          desc338[i].putDouble( idRd, 0.000000 );
                          var idGrn = charIDToTypeID( "Grn " );
                          desc338[i].putDouble( idGrn, 0.000000 );
                          var idBl = charIDToTypeID( "Bl  " );
                          desc338[i].putDouble( idBl, 0.000000 );
                      var idRGBC = charIDToTypeID( "RGBC" );
                      desc336[i].putObject( idstrokeColor, idRGBC, desc338[i] );
                      var idFl = charIDToTypeID( "Fl  " );
                      desc336[i].putBoolean( idFl, true );
                      var idStrk = charIDToTypeID( "Strk" );
                      desc336[i].putBoolean( idStrk, false );
                      var idfillFirst = stringIDToTypeID( "fillFirst" );
                      desc336[i].putBoolean( idfillFirst, false );
                      var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                      desc336[i].putBoolean( idfillOverPrint, false );
                      var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                      desc336[i].putBoolean( idstrokeOverPrint, false );
                      var idlineCap = stringIDToTypeID( "lineCap" );
                      var idlineCap = stringIDToTypeID( "lineCap" );
                      var idbuttCap = stringIDToTypeID( "buttCap" );
                      desc336[i].putEnumerated( idlineCap, idlineCap, idbuttCap );
                      var idlineJoin = stringIDToTypeID( "lineJoin" );
                      var idlineJoin = stringIDToTypeID( "lineJoin" );
                      var idmiterJoin = stringIDToTypeID( "miterJoin" );
                      desc336[i].putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                      var idlineWidth = stringIDToTypeID( "lineWidth" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc336[i].putUnitDouble( idlineWidth, idPnt, 0.009999 );
                      var idmiterLimit = stringIDToTypeID( "miterLimit" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc336[i].putUnitDouble( idmiterLimit, idPnt, 0.009999 );
                      var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                      desc336[i].putDouble( idlineDashoffset, 0.000000 );
                  var idTxtS = charIDToTypeID( "TxtS" );
                  desc335[i].putObject( idTxtS, idTxtS, desc336[i] );

              // Filler circle for symbol
              var idTxtt = charIDToTypeID( "Txtt" );
              list31.putObject( idTxtt, desc335[i] );
                  desc339[desc339.length] = new ActionDescriptor();
                  var idFrom = charIDToTypeID( "From" );
                  desc339[i].putInteger( idFrom, symbolIndices[i] ); // Starting index of symbol
                  var idT = charIDToTypeID( "T   " );
                  desc339[i].putInteger( idT, symbolIndices[i]+1 ); // Starting index of symbol + 1
                  var idTxtS = charIDToTypeID( "TxtS" );
                      desc340[desc340.length] = new ActionDescriptor();
                      var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                      desc340[i].putBoolean( idstyleSheetHasParent, true );
                      var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                      desc340[i].putString( idfontPostScriptName, selectedFont );
                      var idFntN = charIDToTypeID( "FntN" );
                      desc340[i].putString( idFntN, selectedFont );
                      var idFntS = charIDToTypeID( "FntS" );
                      desc340[i].putString( idFntS, "Regular" );
                      var idScrp = charIDToTypeID( "Scrp" );
                      desc340[i].putInteger( idScrp, 0 );
                      var idFntT = charIDToTypeID( "FntT" );
                      desc340[i].putInteger( idFntT, 1 );
                      var idSz = charIDToTypeID( "Sz  " );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc340[i].putUnitDouble( idSz, idPnt, 74.990623 );
                      var idHrzS = charIDToTypeID( "HrzS" );
                      desc340[i].putDouble( idHrzS, 100.000000 );
                      var idVrtS = charIDToTypeID( "VrtS" );
                      desc340[i].putDouble( idVrtS, 100.000000 );
                      var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                      desc340[i].putBoolean( idsyntheticBold, false );
                      var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                      desc340[i].putBoolean( idsyntheticItalic, false );
                      var idautoLeading = stringIDToTypeID( "autoLeading" );
                      desc340[i].putBoolean( idautoLeading, true );
                      var idTrck = charIDToTypeID( "Trck" );
                      desc340[i].putInteger( idTrck, 0 );
                      var idBsln = charIDToTypeID( "Bsln" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc340[i].putUnitDouble( idBsln, idPnt, 0.000000 );
                      var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                      desc340[i].putDouble( idcharacterRotation, 0.000000 );
                      var idAtKr = charIDToTypeID( "AtKr" );
                      var idAtKr = charIDToTypeID( "AtKr" );
                      var idmetricsKern = stringIDToTypeID( "metricsKern" );
                      desc340[i].putEnumerated( idAtKr, idAtKr, idmetricsKern );
                      var idfontCaps = stringIDToTypeID( "fontCaps" );
                      var idfontCaps = stringIDToTypeID( "fontCaps" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc340[i].putEnumerated( idfontCaps, idfontCaps, idNrml );
                      var idbaseline = stringIDToTypeID( "baseline" );
                      var idbaseline = stringIDToTypeID( "baseline" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc340[i].putEnumerated( idbaseline, idbaseline, idNrml );
                      var idotbaseline = stringIDToTypeID( "otbaseline" );
                      var idotbaseline = stringIDToTypeID( "otbaseline" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc340[i].putEnumerated( idotbaseline, idotbaseline, idNrml );
                      var idstrikethrough = stringIDToTypeID( "strikethrough" );
                      var idstrikethrough = stringIDToTypeID( "strikethrough" );
                      var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                      desc340[i].putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                      var idUndl = charIDToTypeID( "Undl" );
                      var idUndl = charIDToTypeID( "Undl" );
                      var idunderlineOff = stringIDToTypeID( "underlineOff" );
                      desc340[i].putEnumerated( idUndl, idUndl, idunderlineOff );
                      var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc340[i].putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                      var idligature = stringIDToTypeID( "ligature" );
                      desc340[i].putBoolean( idligature, true );
                      var idaltligature = stringIDToTypeID( "altligature" );
                      desc340[i].putBoolean( idaltligature, false );
                      var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                      desc340[i].putBoolean( idcontextualLigatures, true );
                      var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                      desc340[i].putBoolean( idalternateLigatures, false );
                      var idoldStyle = stringIDToTypeID( "oldStyle" );
                      desc340[i].putBoolean( idoldStyle, false );
                      var idfractions = stringIDToTypeID( "fractions" );
                      desc340[i].putBoolean( idfractions, false );
                      var idordinals = stringIDToTypeID( "ordinals" );
                      desc340[i].putBoolean( idordinals, false );
                      var idswash = stringIDToTypeID( "swash" );
                      desc340[i].putBoolean( idswash, false );
                      var idtitling = stringIDToTypeID( "titling" );
                      desc340[i].putBoolean( idtitling, false );
                      var idconnectionForms = stringIDToTypeID( "connectionForms" );
                      desc340[i].putBoolean( idconnectionForms, true );
                      var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                      desc340[i].putBoolean( idstylisticAlternates, false );
                      var idornaments = stringIDToTypeID( "ornaments" );
                      desc340[i].putBoolean( idornaments, false );
                      var idfigureStyle = stringIDToTypeID( "figureStyle" );
                      var idfigureStyle = stringIDToTypeID( "figureStyle" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc340[i].putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                      var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                      desc340[i].putBoolean( idproportionalMetrics, false );
                      var idkana = stringIDToTypeID( "kana" );
                      desc340[i].putBoolean( idkana, false );
                      var iditalics = stringIDToTypeID( "italics" );
                      desc340[i].putBoolean( iditalics, false );
                      var idruby = stringIDToTypeID( "ruby" );
                      desc340[i].putBoolean( idruby, false );
                      var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                      var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                      var idwithStream = stringIDToTypeID( "withStream" );
                      desc340[i].putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
                      var idtextLanguage = stringIDToTypeID( "textLanguage" );
                      var idtextLanguage = stringIDToTypeID( "textLanguage" );
                      var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                      desc340[i].putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                      var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                      var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                      var iddefaultForm = stringIDToTypeID( "defaultForm" );
                      desc340[i].putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
                      var idmojiZume = stringIDToTypeID( "mojiZume" );
                      desc340[i].putDouble( idmojiZume, 0.000000 );
                      var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                      var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                      var idroman = stringIDToTypeID( "roman" );
                      desc340[i].putEnumerated( idgridAlignment, idgridAlignment, idroman );
                      var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                      desc340[i].putBoolean( idenableWariChu, false );
                      var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                      desc340[i].putInteger( idwariChuCount, 2 );
                      var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                      desc340[i].putInteger( idwariChuLineGap, 0 );
                      var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                      desc340[i].putDouble( idwariChuScale, 0.500000 );
                      var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                      desc340[i].putInteger( idwariChuWidow, 2 );
                      var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                      desc340[i].putInteger( idwariChuOrphan, 2 );
                      var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                      var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                      var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                      desc340[i].putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                      var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                      desc340[i].putInteger( idtcyUpDown, 0 );
                      var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                      desc340[i].putInteger( idtcyLeftRight, 0 );
                      var idleftAki = stringIDToTypeID( "leftAki" );
                      desc340[i].putDouble( idleftAki, -1.000000 );
                      var idrightAki = stringIDToTypeID( "rightAki" );
                      desc340[i].putDouble( idrightAki, -1.000000 );
                      var idjiDori = stringIDToTypeID( "jiDori" );
                      desc340[i].putInteger( idjiDori, 0 );
                      var idnoBreak = stringIDToTypeID( "noBreak" );
                      desc340[i].putBoolean( idnoBreak, false );
                      var idClr = charIDToTypeID( "Clr " ); // RGB values for colour fill
                          desc341[desc341.length] = new ActionDescriptor();
                          var idRd = charIDToTypeID( "Rd  " );
                          desc341[i].putDouble( idRd, rgbValue[0] );
                          var idGrn = charIDToTypeID( "Grn " );
                          desc341[i].putDouble( idGrn, rgbValue[1] );
                          var idBl = charIDToTypeID( "Bl  " );
                          desc341[i].putDouble( idBl, rgbValue[2] );
                      var idRGBC = charIDToTypeID( "RGBC" );
                      desc340[i].putObject( idClr, idRGBC, desc341[i] );
                      var idstrokeColor = stringIDToTypeID( "strokeColor" );
                          desc342[desc342.length] = new ActionDescriptor();
                          var idRd = charIDToTypeID( "Rd  " );
                          desc342[i].putDouble( idRd, 0.000000 );
                          var idGrn = charIDToTypeID( "Grn " );
                          desc342[i].putDouble( idGrn, 0.000000 );
                          var idBl = charIDToTypeID( "Bl  " );
                          desc342[i].putDouble( idBl, 0.000000 );
                      var idRGBC = charIDToTypeID( "RGBC" );
                      desc340[i].putObject( idstrokeColor, idRGBC, desc342[i] );
                      var idFl = charIDToTypeID( "Fl  " );
                      desc340[i].putBoolean( idFl, true );
                      var idStrk = charIDToTypeID( "Strk" );
                      desc340[i].putBoolean( idStrk, false );
                      var idfillFirst = stringIDToTypeID( "fillFirst" );
                      desc340[i].putBoolean( idfillFirst, false );
                      var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                      desc340[i].putBoolean( idfillOverPrint, false );
                      var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                      desc340[i].putBoolean( idstrokeOverPrint, false );
                      var idlineCap = stringIDToTypeID( "lineCap" );
                      var idlineCap = stringIDToTypeID( "lineCap" );
                      var idbuttCap = stringIDToTypeID( "buttCap" );
                      desc340[i].putEnumerated( idlineCap, idlineCap, idbuttCap );
                      var idlineJoin = stringIDToTypeID( "lineJoin" );
                      var idlineJoin = stringIDToTypeID( "lineJoin" );
                      var idmiterJoin = stringIDToTypeID( "miterJoin" );
                      desc340[i].putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                      var idlineWidth = stringIDToTypeID( "lineWidth" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc340[i].putUnitDouble( idlineWidth, idPnt, 0.009999 );
                      var idmiterLimit = stringIDToTypeID( "miterLimit" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc340[i].putUnitDouble( idmiterLimit, idPnt, 0.009999 );
                      var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                      desc340[i].putDouble( idlineDashoffset, 0.000000 );
                  var idTxtS = charIDToTypeID( "TxtS" );
                  desc339[i].putObject( idTxtS, idTxtS, desc340[i] );

              // The actual seleced symbol
              var idTxtt = charIDToTypeID( "Txtt" );
              list31.putObject( idTxtt, desc339[i] );
                  desc343[desc343.length] = new ActionDescriptor();
                  var idFrom = charIDToTypeID( "From" );
                  desc343[i].putInteger( idFrom, symbolIndices[i]+1 ); // The starting index of the symbol
                  var idT = charIDToTypeID( "T   " );
                  desc343[i].putInteger( idT, symbolIndices[i]+2 ); // That starting index + 1
                  var idTxtS = charIDToTypeID( "TxtS" );
                      desc344[desc344.length] = new ActionDescriptor();
                      var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                      desc344[i].putBoolean( idstyleSheetHasParent, true );
                      var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                      desc344[i].putString( idfontPostScriptName, selectedFont );
                      var idFntN = charIDToTypeID( "FntN" );
                      desc344[i].putString( idFntN, selectedFont );
                      var idFntS = charIDToTypeID( "FntS" );
                      desc344[i].putString( idFntS, "Regular" );
                      var idScrp = charIDToTypeID( "Scrp" );
                      desc344[i].putInteger( idScrp, 0 );
                      var idFntT = charIDToTypeID( "FntT" );
                      desc344[i].putInteger( idFntT, 1 );
                      var idSz = charIDToTypeID( "Sz  " );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc344[i].putUnitDouble( idSz, idPnt, 74.990623 );
                      var idHrzS = charIDToTypeID( "HrzS" );
                      desc344[i].putDouble( idHrzS, 100.000000 );
                      var idVrtS = charIDToTypeID( "VrtS" );
                      desc344[i].putDouble( idVrtS, 100.000000 );
                      var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                      desc344[i].putBoolean( idsyntheticBold, false );
                      var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                      desc344[i].putBoolean( idsyntheticItalic, false );
                      var idautoLeading = stringIDToTypeID( "autoLeading" );
                      desc344[i].putBoolean( idautoLeading, true );
                      var idTrck = charIDToTypeID( "Trck" );
                      desc344[i].putInteger( idTrck, 0 );
                      var idBsln = charIDToTypeID( "Bsln" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc344[i].putUnitDouble( idBsln, idPnt, 0.000000 );
                      var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                      desc344[i].putDouble( idcharacterRotation, 0.000000 );
                      var idAtKr = charIDToTypeID( "AtKr" );
                      var idAtKr = charIDToTypeID( "AtKr" );
                      var idmetricsKern = stringIDToTypeID( "metricsKern" );
                      desc344[i].putEnumerated( idAtKr, idAtKr, idmetricsKern );
                      var idfontCaps = stringIDToTypeID( "fontCaps" );
                      var idfontCaps = stringIDToTypeID( "fontCaps" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc344[i].putEnumerated( idfontCaps, idfontCaps, idNrml );
                      var idbaseline = stringIDToTypeID( "baseline" );
                      var idbaseline = stringIDToTypeID( "baseline" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc344[i].putEnumerated( idbaseline, idbaseline, idNrml );
                      var idotbaseline = stringIDToTypeID( "otbaseline" );
                      var idotbaseline = stringIDToTypeID( "otbaseline" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc344[i].putEnumerated( idotbaseline, idotbaseline, idNrml );
                      var idstrikethrough = stringIDToTypeID( "strikethrough" );
                      var idstrikethrough = stringIDToTypeID( "strikethrough" );
                      var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                      desc344[i].putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                      var idUndl = charIDToTypeID( "Undl" );
                      var idUndl = charIDToTypeID( "Undl" );
                      var idunderlineOff = stringIDToTypeID( "underlineOff" );
                      desc344[i].putEnumerated( idUndl, idUndl, idunderlineOff );
                      var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc344[i].putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                      var idligature = stringIDToTypeID( "ligature" );
                      desc344[i].putBoolean( idligature, true );
                      var idaltligature = stringIDToTypeID( "altligature" );
                      desc344[i].putBoolean( idaltligature, false );
                      var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                      desc344[i].putBoolean( idcontextualLigatures, true );
                      var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                      desc344[i].putBoolean( idalternateLigatures, false );
                      var idoldStyle = stringIDToTypeID( "oldStyle" );
                      desc344[i].putBoolean( idoldStyle, false );
                      var idfractions = stringIDToTypeID( "fractions" );
                      desc344[i].putBoolean( idfractions, false );
                      var idordinals = stringIDToTypeID( "ordinals" );
                      desc344[i].putBoolean( idordinals, false );
                      var idswash = stringIDToTypeID( "swash" );
                      desc344[i].putBoolean( idswash, false );
                      var idtitling = stringIDToTypeID( "titling" );
                      desc344[i].putBoolean( idtitling, false );
                      var idconnectionForms = stringIDToTypeID( "connectionForms" );
                      desc344[i].putBoolean( idconnectionForms, true );
                      var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                      desc344[i].putBoolean( idstylisticAlternates, false );
                      var idornaments = stringIDToTypeID( "ornaments" );
                      desc344[i].putBoolean( idornaments, false );
                      var idfigureStyle = stringIDToTypeID( "figureStyle" );
                      var idfigureStyle = stringIDToTypeID( "figureStyle" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc344[i].putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                      var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                      desc344[i].putBoolean( idproportionalMetrics, false );
                      var idkana = stringIDToTypeID( "kana" );
                      desc344[i].putBoolean( idkana, false );
                      var iditalics = stringIDToTypeID( "italics" );
                      desc344[i].putBoolean( iditalics, false );
                      var idruby = stringIDToTypeID( "ruby" );
                      desc344[i].putBoolean( idruby, false );
                      var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                      var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                      var idwithStream = stringIDToTypeID( "withStream" );
                      desc344[i].putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
                      var idtextLanguage = stringIDToTypeID( "textLanguage" );
                      var idtextLanguage = stringIDToTypeID( "textLanguage" );
                      var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                      desc344[i].putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                      var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                      var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                      var iddefaultForm = stringIDToTypeID( "defaultForm" );
                      desc344[i].putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
                      var idmojiZume = stringIDToTypeID( "mojiZume" );
                      desc344[i].putDouble( idmojiZume, 0.000000 );
                      var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                      var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                      var idroman = stringIDToTypeID( "roman" );
                      desc344[i].putEnumerated( idgridAlignment, idgridAlignment, idroman );
                      var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                      desc344[i].putBoolean( idenableWariChu, false );
                      var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                      desc344[i].putInteger( idwariChuCount, 2 );
                      var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                      desc344[i].putInteger( idwariChuLineGap, 0 );
                      var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                      desc344[i].putDouble( idwariChuScale, 0.500000 );
                      var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                      desc344[i].putInteger( idwariChuWidow, 2 );
                      var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                      desc344[i].putInteger( idwariChuOrphan, 2 );
                      var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                      var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                      var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                      desc344[i].putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                      var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                      desc344[i].putInteger( idtcyUpDown, 0 );
                      var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                      desc344[i].putInteger( idtcyLeftRight, 0 );
                      var idleftAki = stringIDToTypeID( "leftAki" );
                      desc344[i].putDouble( idleftAki, -1.000000 );
                      var idrightAki = stringIDToTypeID( "rightAki" );
                      desc344[i].putDouble( idrightAki, -1.000000 );
                      var idjiDori = stringIDToTypeID( "jiDori" );
                      desc344[i].putInteger( idjiDori, 0 );
                      var idnoBreak = stringIDToTypeID( "noBreak" );
                      desc344[i].putBoolean( idnoBreak, false );
                      var idClr = charIDToTypeID( "Clr " );
                          desc345[desc345.length] = new ActionDescriptor();
                          var idRd = charIDToTypeID( "Rd  " );
                          desc345[i].putDouble( idRd, 0.000000 );
                          var idGrn = charIDToTypeID( "Grn " );
                          desc345[i].putDouble( idGrn, 0.000000 );
                          var idBl = charIDToTypeID( "Bl  " );
                          desc345[i].putDouble( idBl, 0.000000 );
                      var idRGBC = charIDToTypeID( "RGBC" );
                      desc344[i].putObject( idClr, idRGBC, desc345[i] );
                      var idstrokeColor = stringIDToTypeID( "strokeColor" );
                          desc346[desc346.length] = new ActionDescriptor();
                          var idRd = charIDToTypeID( "Rd  " );
                          desc346[i].putDouble( idRd, 0.000000 );
                          var idGrn = charIDToTypeID( "Grn " );
                          desc346[i].putDouble( idGrn, 0.000000 );
                          var idBl = charIDToTypeID( "Bl  " );
                          desc346[i].putDouble( idBl, 0.000000 );
                      var idRGBC = charIDToTypeID( "RGBC" );
                      desc344[i].putObject( idstrokeColor, idRGBC, desc346[i] );
                      var idFl = charIDToTypeID( "Fl  " );
                      desc344[i].putBoolean( idFl, true );
                      var idStrk = charIDToTypeID( "Strk" );
                      desc344[i].putBoolean( idStrk, false );
                      var idfillFirst = stringIDToTypeID( "fillFirst" );
                      desc344[i].putBoolean( idfillFirst, false );
                      var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                      desc344[i].putBoolean( idfillOverPrint, false );
                      var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                      desc344[i].putBoolean( idstrokeOverPrint, false );
                      var idlineCap = stringIDToTypeID( "lineCap" );
                      var idlineCap = stringIDToTypeID( "lineCap" );
                      var idbuttCap = stringIDToTypeID( "buttCap" );
                      desc344[i].putEnumerated( idlineCap, idlineCap, idbuttCap );
                      var idlineJoin = stringIDToTypeID( "lineJoin" );
                      var idlineJoin = stringIDToTypeID( "lineJoin" );
                      var idmiterJoin = stringIDToTypeID( "miterJoin" );
                      desc344[i].putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                      var idlineWidth = stringIDToTypeID( "lineWidth" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc344[i].putUnitDouble( idlineWidth, idPnt, 0.009999 );
                      var idmiterLimit = stringIDToTypeID( "miterLimit" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc344[i].putUnitDouble( idmiterLimit, idPnt, 0.009999 );
                      var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                      desc344[i].putDouble( idlineDashoffset, 0.000000 );
                  var idTxtS = charIDToTypeID( "TxtS" );
                  desc343[i].putObject( idTxtS, idTxtS, desc344[i] );
                  originIndex = symbolIndices[i]+2;
            }
            // ------------------------------ Loop Here ------------------------------

            // The rest of the text
            var idTxtt = charIDToTypeID( "Txtt" );
            list31.putObject( idTxtt, desc343[desc343.length - 1] );
                var desc347 = new ActionDescriptor();
                var idFrom = charIDToTypeID( "From" );
                desc347.putInteger( idFrom, symbolIndices[symbolIndices.length-1]+2 ); // The last symbol's index + 2
                var idT = charIDToTypeID( "T   " );
                desc347.putInteger( idT, inputString.length ); // The length of the string
                var idTxtS = charIDToTypeID( "TxtS" );
                    var desc348 = new ActionDescriptor();
                    var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                    desc348.putBoolean( idstyleSheetHasParent, true );
                    var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                    desc348.putString( idfontPostScriptName, "MPlantin" );
                    var idFntN = charIDToTypeID( "FntN" );
                    desc348.putString( idFntN, "MPlantin" );
                    var idFntS = charIDToTypeID( "FntS" );
                    desc348.putString( idFntS, "Regular" );
                    var idScrp = charIDToTypeID( "Scrp" );
                    desc348.putInteger( idScrp, 0 );
                    var idFntT = charIDToTypeID( "FntT" );
                    desc348.putInteger( idFntT, 1 );
                    var idSz = charIDToTypeID( "Sz  " );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc348.putUnitDouble( idSz, idPnt, 74.990623 );
                    var idHrzS = charIDToTypeID( "HrzS" );
                    desc348.putDouble( idHrzS, 100.000000 );
                    var idVrtS = charIDToTypeID( "VrtS" );
                    desc348.putDouble( idVrtS, 100.000000 );
                    var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                    desc348.putBoolean( idsyntheticBold, false );
                    var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                    desc348.putBoolean( idsyntheticItalic, false );
                    var idautoLeading = stringIDToTypeID( "autoLeading" );
                    desc348.putBoolean( idautoLeading, true );
                    var idTrck = charIDToTypeID( "Trck" );
                    desc348.putInteger( idTrck, 0 );
                    var idBsln = charIDToTypeID( "Bsln" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc348.putUnitDouble( idBsln, idPnt, 0.000000 );
                    var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                    desc348.putDouble( idcharacterRotation, 0.000000 );
                    var idAtKr = charIDToTypeID( "AtKr" );
                    var idAtKr = charIDToTypeID( "AtKr" );
                    var idmetricsKern = stringIDToTypeID( "metricsKern" );
                    desc348.putEnumerated( idAtKr, idAtKr, idmetricsKern );
                    var idfontCaps = stringIDToTypeID( "fontCaps" );
                    var idfontCaps = stringIDToTypeID( "fontCaps" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc348.putEnumerated( idfontCaps, idfontCaps, idNrml );
                    var idbaseline = stringIDToTypeID( "baseline" );
                    var idbaseline = stringIDToTypeID( "baseline" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc348.putEnumerated( idbaseline, idbaseline, idNrml );
                    var idotbaseline = stringIDToTypeID( "otbaseline" );
                    var idotbaseline = stringIDToTypeID( "otbaseline" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc348.putEnumerated( idotbaseline, idotbaseline, idNrml );
                    var idstrikethrough = stringIDToTypeID( "strikethrough" );
                    var idstrikethrough = stringIDToTypeID( "strikethrough" );
                    var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                    desc348.putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                    var idUndl = charIDToTypeID( "Undl" );
                    var idUndl = charIDToTypeID( "Undl" );
                    var idunderlineOff = stringIDToTypeID( "underlineOff" );
                    desc348.putEnumerated( idUndl, idUndl, idunderlineOff );
                    var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc348.putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                    var idligature = stringIDToTypeID( "ligature" );
                    desc348.putBoolean( idligature, true );
                    var idaltligature = stringIDToTypeID( "altligature" );
                    desc348.putBoolean( idaltligature, false );
                    var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                    desc348.putBoolean( idcontextualLigatures, true );
                    var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                    desc348.putBoolean( idalternateLigatures, false );
                    var idoldStyle = stringIDToTypeID( "oldStyle" );
                    desc348.putBoolean( idoldStyle, false );
                    var idfractions = stringIDToTypeID( "fractions" );
                    desc348.putBoolean( idfractions, false );
                    var idordinals = stringIDToTypeID( "ordinals" );
                    desc348.putBoolean( idordinals, false );
                    var idswash = stringIDToTypeID( "swash" );
                    desc348.putBoolean( idswash, false );
                    var idtitling = stringIDToTypeID( "titling" );
                    desc348.putBoolean( idtitling, false );
                    var idconnectionForms = stringIDToTypeID( "connectionForms" );
                    desc348.putBoolean( idconnectionForms, true );
                    var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                    desc348.putBoolean( idstylisticAlternates, false );
                    var idornaments = stringIDToTypeID( "ornaments" );
                    desc348.putBoolean( idornaments, false );
                    var idfigureStyle = stringIDToTypeID( "figureStyle" );
                    var idfigureStyle = stringIDToTypeID( "figureStyle" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc348.putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                    var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                    desc348.putBoolean( idproportionalMetrics, false );
                    var idkana = stringIDToTypeID( "kana" );
                    desc348.putBoolean( idkana, false );
                    var iditalics = stringIDToTypeID( "italics" );
                    desc348.putBoolean( iditalics, false );
                    var idruby = stringIDToTypeID( "ruby" );
                    desc348.putBoolean( idruby, false );
                    var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                    var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                    var idwithStream = stringIDToTypeID( "withStream" );
                    desc348.putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                    desc348.putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                    var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                    var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                    var iddefaultForm = stringIDToTypeID( "defaultForm" );
                    desc348.putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
                    var idmojiZume = stringIDToTypeID( "mojiZume" );
                    desc348.putDouble( idmojiZume, 0.000000 );
                    var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                    var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                    var idroman = stringIDToTypeID( "roman" );
                    desc348.putEnumerated( idgridAlignment, idgridAlignment, idroman );
                    var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                    desc348.putBoolean( idenableWariChu, false );
                    var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                    desc348.putInteger( idwariChuCount, 2 );
                    var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                    desc348.putInteger( idwariChuLineGap, 0 );
                    var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                    desc348.putDouble( idwariChuScale, 0.500000 );
                    var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                    desc348.putInteger( idwariChuWidow, 2 );
                    var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                    desc348.putInteger( idwariChuOrphan, 2 );
                    var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                    var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                    var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                    desc348.putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                    var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                    desc348.putInteger( idtcyUpDown, 0 );
                    var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                    desc348.putInteger( idtcyLeftRight, 0 );
                    var idleftAki = stringIDToTypeID( "leftAki" );
                    desc348.putDouble( idleftAki, -1.000000 );
                    var idrightAki = stringIDToTypeID( "rightAki" );
                    desc348.putDouble( idrightAki, -1.000000 );
                    var idjiDori = stringIDToTypeID( "jiDori" );
                    desc348.putInteger( idjiDori, 0 );
                    var idnoBreak = stringIDToTypeID( "noBreak" );
                    desc348.putBoolean( idnoBreak, false );
                    var idClr = charIDToTypeID( "Clr " );
                        var desc349 = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc349.putDouble( idRd, 0.000000 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc349.putDouble( idGrn, 0.000000 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc349.putDouble( idBl, 0.000000 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc348.putObject( idClr, idRGBC, desc349 );
                    var idstrokeColor = stringIDToTypeID( "strokeColor" );
                        var desc350 = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc350.putDouble( idRd, 0.000000 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc350.putDouble( idGrn, 0.000000 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc350.putDouble( idBl, 0.000000 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc348.putObject( idstrokeColor, idRGBC, desc350 );
                    var idFl = charIDToTypeID( "Fl  " );
                    desc348.putBoolean( idFl, true );
                    var idStrk = charIDToTypeID( "Strk" );
                    desc348.putBoolean( idStrk, false );
                    var idfillFirst = stringIDToTypeID( "fillFirst" );
                    desc348.putBoolean( idfillFirst, false );
                    var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                    desc348.putBoolean( idfillOverPrint, false );
                    var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                    desc348.putBoolean( idstrokeOverPrint, false );
                    var idlineCap = stringIDToTypeID( "lineCap" );
                    var idlineCap = stringIDToTypeID( "lineCap" );
                    var idbuttCap = stringIDToTypeID( "buttCap" );
                    desc348.putEnumerated( idlineCap, idlineCap, idbuttCap );
                    var idlineJoin = stringIDToTypeID( "lineJoin" );
                    var idlineJoin = stringIDToTypeID( "lineJoin" );
                    var idmiterJoin = stringIDToTypeID( "miterJoin" );
                    desc348.putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                    var idlineWidth = stringIDToTypeID( "lineWidth" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc348.putUnitDouble( idlineWidth, idPnt, 0.009999 );
                    var idmiterLimit = stringIDToTypeID( "miterLimit" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc348.putUnitDouble( idmiterLimit, idPnt, 0.009999 );
                    var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                    desc348.putDouble( idlineDashoffset, 0.000000 );
                var idTxtS = charIDToTypeID( "TxtS" );
                desc347.putObject( idTxtS, idTxtS, desc348 );
            var idTxtt = charIDToTypeID( "Txtt" );
            list31.putObject( idTxtt, desc347 );

        // Text layer formatting - justification, line breaks, etc.
        desc330.putList( idTxtt, list31 );
        var idparagraphStyleRange = stringIDToTypeID( "paragraphStyleRange" );
            var list32 = new ActionList();
                var desc351 = new ActionDescriptor();
                var idFrom = charIDToTypeID( "From" );
                desc351.putInteger( idFrom, 0 ); // Leave as 0
                var idT = charIDToTypeID( "T   " );
                desc351.putInteger( idT, 9 ); // The length of the string
                var idparagraphStyle = stringIDToTypeID( "paragraphStyle" );
                    var desc352 = new ActionDescriptor();
                    var idAlgn = charIDToTypeID( "Algn" );
                    var idAlg = charIDToTypeID( "Alg " );
                    var idRght = charIDToTypeID( "Rght" );
                    desc352.putEnumerated( idAlgn, idAlg, idRght );
                    var idfirstLineIndent = stringIDToTypeID( "firstLineIndent" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc352.putUnitDouble( idfirstLineIndent, idPnt, 0.000000 );
                    var idstartIndent = stringIDToTypeID( "startIndent" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc352.putUnitDouble( idstartIndent, idPnt, 0.000000 );
                    var idendIndent = stringIDToTypeID( "endIndent" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc352.putUnitDouble( idendIndent, idPnt, 0.000000 );
                    var idspaceBefore = stringIDToTypeID( "spaceBefore" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc352.putUnitDouble( idspaceBefore, idPnt, 0.000000 );
                    var idspaceAfter = stringIDToTypeID( "spaceAfter" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc352.putUnitDouble( idspaceAfter, idPnt, 0.000000 );
                    var iddropCapMultiplier = stringIDToTypeID( "dropCapMultiplier" );
                    desc352.putInteger( iddropCapMultiplier, 1 );
                    var idautoLeadingPercentage = stringIDToTypeID( "autoLeadingPercentage" );
                    desc352.putDouble( idautoLeadingPercentage, 1.200000 );
                    var idleadingType = stringIDToTypeID( "leadingType" );
                    var idleadingType = stringIDToTypeID( "leadingType" );
                    var idleadingBelow = stringIDToTypeID( "leadingBelow" );
                    desc352.putEnumerated( idleadingType, idleadingType, idleadingBelow );
                    var idhyphenate = stringIDToTypeID( "hyphenate" );
                    desc352.putBoolean( idhyphenate, true );
                    var idhyphenateWordSize = stringIDToTypeID( "hyphenateWordSize" );
                    desc352.putInteger( idhyphenateWordSize, 6 );
                    var idhyphenatePreLength = stringIDToTypeID( "hyphenatePreLength" );
                    desc352.putInteger( idhyphenatePreLength, 2 );
                    var idhyphenatePostLength = stringIDToTypeID( "hyphenatePostLength" );
                    desc352.putInteger( idhyphenatePostLength, 2 );
                    var idhyphenateLimit = stringIDToTypeID( "hyphenateLimit" );
                    desc352.putInteger( idhyphenateLimit, 0 );
                    var idhyphenationZone = stringIDToTypeID( "hyphenationZone" );
                    desc352.putDouble( idhyphenationZone, 36.000000 );
                    var idhyphenateCapitalized = stringIDToTypeID( "hyphenateCapitalized" );
                    desc352.putBoolean( idhyphenateCapitalized, true );
                    var idhyphenationPreference = stringIDToTypeID( "hyphenationPreference" );
                    desc352.putDouble( idhyphenationPreference, 0.500000 );
                    var idjustificationWordMinimum = stringIDToTypeID( "justificationWordMinimum" );
                    desc352.putDouble( idjustificationWordMinimum, 0.800000 );
                    var idjustificationWordDesired = stringIDToTypeID( "justificationWordDesired" );
                    desc352.putDouble( idjustificationWordDesired, 1.000000 );
                    var idjustificationWordMaximum = stringIDToTypeID( "justificationWordMaximum" );
                    desc352.putDouble( idjustificationWordMaximum, 1.330000 );
                    var idjustificationLetterMinimum = stringIDToTypeID( "justificationLetterMinimum" );
                    desc352.putDouble( idjustificationLetterMinimum, 0.000000 );
                    var idjustificationLetterDesired = stringIDToTypeID( "justificationLetterDesired" );
                    desc352.putDouble( idjustificationLetterDesired, 0.000000 );
                    var idjustificationLetterMaximum = stringIDToTypeID( "justificationLetterMaximum" );
                    desc352.putDouble( idjustificationLetterMaximum, 0.000000 );
                    var idjustificationGlyphMinimum = stringIDToTypeID( "justificationGlyphMinimum" );
                    desc352.putDouble( idjustificationGlyphMinimum, 1.000000 );
                    var idjustificationGlyphDesired = stringIDToTypeID( "justificationGlyphDesired" );
                    desc352.putDouble( idjustificationGlyphDesired, 1.000000 );
                    var idjustificationGlyphMaximum = stringIDToTypeID( "justificationGlyphMaximum" );
                    desc352.putDouble( idjustificationGlyphMaximum, 1.000000 );
                    var idsingleWordJustification = stringIDToTypeID( "singleWordJustification" );
                    var idAlg = charIDToTypeID( "Alg " );
                    var idJstA = charIDToTypeID( "JstA" );
                    desc352.putEnumerated( idsingleWordJustification, idAlg, idJstA );
                    var idhangingRoman = stringIDToTypeID( "hangingRoman" );
                    desc352.putBoolean( idhangingRoman, false );
                    var idautoTCY = stringIDToTypeID( "autoTCY" );
                    desc352.putInteger( idautoTCY, 1 );
                    var idkeepTogether = stringIDToTypeID( "keepTogether" );
                    desc352.putBoolean( idkeepTogether, false );
                    var idburasagari = stringIDToTypeID( "burasagari" );
                    var idburasagari = stringIDToTypeID( "burasagari" );
                    var idburasagariNone = stringIDToTypeID( "burasagariNone" );
                    desc352.putEnumerated( idburasagari, idburasagari, idburasagariNone );
                    var idpreferredKinsokuOrder = stringIDToTypeID( "preferredKinsokuOrder" );
                    var idpreferredKinsokuOrder = stringIDToTypeID( "preferredKinsokuOrder" );
                    var idpushIn = stringIDToTypeID( "pushIn" );
                    desc352.putEnumerated( idpreferredKinsokuOrder, idpreferredKinsokuOrder, idpushIn );
                    var idkurikaeshiMojiShori = stringIDToTypeID( "kurikaeshiMojiShori" );
                    desc352.putBoolean( idkurikaeshiMojiShori, false );
                    var idtextEveryLineComposer = stringIDToTypeID( "textEveryLineComposer" );
                    desc352.putBoolean( idtextEveryLineComposer, false );
                    var iddefaultTabWidth = stringIDToTypeID( "defaultTabWidth" );
                    desc352.putDouble( iddefaultTabWidth, 36.000000 );
                    var iddefaultStyle = stringIDToTypeID( "defaultStyle" );
                        var desc353 = new ActionDescriptor();
                        var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                        desc353.putString( idfontPostScriptName, "Keyrune" );
                        var idFntN = charIDToTypeID( "FntN" );
                        desc353.putString( idFntN, "Keyrune" );
                        var idFntS = charIDToTypeID( "FntS" );
                        desc353.putString( idFntS, "Regular" );
                        var idScrp = charIDToTypeID( "Scrp" );
                        desc353.putInteger( idScrp, 3 );
                        var idFntT = charIDToTypeID( "FntT" );
                        desc353.putInteger( idFntT, 1 );
                        var idSz = charIDToTypeID( "Sz  " );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc353.putUnitDouble( idSz, idPnt, 11.998500 );
                        var idHrzS = charIDToTypeID( "HrzS" );
                        desc353.putDouble( idHrzS, 100.000000 );
                        var idVrtS = charIDToTypeID( "VrtS" );
                        desc353.putDouble( idVrtS, 100.000000 );
                        var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                        desc353.putBoolean( idsyntheticBold, false );
                        var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                        desc353.putBoolean( idsyntheticItalic, false );
                        var idautoLeading = stringIDToTypeID( "autoLeading" );
                        desc353.putBoolean( idautoLeading, true );
                        var idTrck = charIDToTypeID( "Trck" );
                        desc353.putInteger( idTrck, 0 );
                        var idBsln = charIDToTypeID( "Bsln" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc353.putUnitDouble( idBsln, idPnt, 0.000000 );
                        var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                        desc353.putDouble( idcharacterRotation, 0.000000 );
                        var idAtKr = charIDToTypeID( "AtKr" );
                        var idAtKr = charIDToTypeID( "AtKr" );
                        var idmetricsKern = stringIDToTypeID( "metricsKern" );
                        desc353.putEnumerated( idAtKr, idAtKr, idmetricsKern );
                        var idfontCaps = stringIDToTypeID( "fontCaps" );
                        var idfontCaps = stringIDToTypeID( "fontCaps" );
                        var idNrml = charIDToTypeID( "Nrml" );
                        desc353.putEnumerated( idfontCaps, idfontCaps, idNrml );
                        var idbaseline = stringIDToTypeID( "baseline" );
                        var idbaseline = stringIDToTypeID( "baseline" );
                        var idNrml = charIDToTypeID( "Nrml" );
                        desc353.putEnumerated( idbaseline, idbaseline, idNrml );
                        var idotbaseline = stringIDToTypeID( "otbaseline" );
                        var idotbaseline = stringIDToTypeID( "otbaseline" );
                        var idNrml = charIDToTypeID( "Nrml" );
                        desc353.putEnumerated( idotbaseline, idotbaseline, idNrml );
                        var idstrikethrough = stringIDToTypeID( "strikethrough" );
                        var idstrikethrough = stringIDToTypeID( "strikethrough" );
                        var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                        desc353.putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                        var idUndl = charIDToTypeID( "Undl" );
                        var idUndl = charIDToTypeID( "Undl" );
                        var idunderlineOff = stringIDToTypeID( "underlineOff" );
                        desc353.putEnumerated( idUndl, idUndl, idunderlineOff );
                        var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc353.putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                        var idligature = stringIDToTypeID( "ligature" );
                        desc353.putBoolean( idligature, true );
                        var idaltligature = stringIDToTypeID( "altligature" );
                        desc353.putBoolean( idaltligature, false );
                        var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                        desc353.putBoolean( idcontextualLigatures, false );
                        var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                        desc353.putBoolean( idalternateLigatures, false );
                        var idoldStyle = stringIDToTypeID( "oldStyle" );
                        desc353.putBoolean( idoldStyle, false );
                        var idfractions = stringIDToTypeID( "fractions" );
                        desc353.putBoolean( idfractions, false );
                        var idordinals = stringIDToTypeID( "ordinals" );
                        desc353.putBoolean( idordinals, false );
                        var idswash = stringIDToTypeID( "swash" );
                        desc353.putBoolean( idswash, false );
                        var idtitling = stringIDToTypeID( "titling" );
                        desc353.putBoolean( idtitling, false );
                        var idconnectionForms = stringIDToTypeID( "connectionForms" );
                        desc353.putBoolean( idconnectionForms, false );
                        var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                        desc353.putBoolean( idstylisticAlternates, false );
                        var idornaments = stringIDToTypeID( "ornaments" );
                        desc353.putBoolean( idornaments, false );
                        var idfigureStyle = stringIDToTypeID( "figureStyle" );
                        var idfigureStyle = stringIDToTypeID( "figureStyle" );
                        var idNrml = charIDToTypeID( "Nrml" );
                        desc353.putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                        var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                        desc353.putBoolean( idproportionalMetrics, false );
                        var idkana = stringIDToTypeID( "kana" );
                        desc353.putBoolean( idkana, false );
                        var iditalics = stringIDToTypeID( "italics" );
                        desc353.putBoolean( iditalics, false );
                        var idruby = stringIDToTypeID( "ruby" );
                        desc353.putBoolean( idruby, false );
                        var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                        var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                        var idrotated = stringIDToTypeID( "rotated" );
                        desc353.putEnumerated( idbaselineDirection, idbaselineDirection, idrotated );
                        var idtextLanguage = stringIDToTypeID( "textLanguage" );
                        var idtextLanguage = stringIDToTypeID( "textLanguage" );
                        var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                        desc353.putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                        var idmojiZume = stringIDToTypeID( "mojiZume" );
                        desc353.putDouble( idmojiZume, 0.000000 );
                        var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                        var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                        var idroman = stringIDToTypeID( "roman" );
                        desc353.putEnumerated( idgridAlignment, idgridAlignment, idroman );
                        var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                        desc353.putBoolean( idenableWariChu, false );
                        var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                        desc353.putInteger( idwariChuCount, 2 );
                        var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                        desc353.putInteger( idwariChuLineGap, 0 );
                        var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                        desc353.putDouble( idwariChuScale, 0.500000 );
                        var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                        desc353.putInteger( idwariChuWidow, 2 );
                        var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                        desc353.putInteger( idwariChuOrphan, 2 );
                        var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                        var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                        var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                        desc353.putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                        var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                        desc353.putInteger( idtcyUpDown, 0 );
                        var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                        desc353.putInteger( idtcyLeftRight, 0 );
                        var idleftAki = stringIDToTypeID( "leftAki" );
                        desc353.putDouble( idleftAki, -1.000000 );
                        var idrightAki = stringIDToTypeID( "rightAki" );
                        desc353.putDouble( idrightAki, -1.000000 );
                        var idjiDori = stringIDToTypeID( "jiDori" );
                        desc353.putInteger( idjiDori, 0 );
                        var idnoBreak = stringIDToTypeID( "noBreak" );
                        desc353.putBoolean( idnoBreak, false );
                        var idClr = charIDToTypeID( "Clr " );
                            var desc354 = new ActionDescriptor();
                            var idRd = charIDToTypeID( "Rd  " );
                            desc354.putDouble( idRd, 0.000000 );
                            var idGrn = charIDToTypeID( "Grn " );
                            desc354.putDouble( idGrn, 0.000000 );
                            var idBl = charIDToTypeID( "Bl  " );
                            desc354.putDouble( idBl, 0.000000 );
                        var idRGBC = charIDToTypeID( "RGBC" );
                        desc353.putObject( idClr, idRGBC, desc354 );
                        var idstrokeColor = stringIDToTypeID( "strokeColor" );
                            var desc355 = new ActionDescriptor();
                            var idRd = charIDToTypeID( "Rd  " );
                            desc355.putDouble( idRd, 0.000000 );
                            var idGrn = charIDToTypeID( "Grn " );
                            desc355.putDouble( idGrn, 0.000000 );
                            var idBl = charIDToTypeID( "Bl  " );
                            desc355.putDouble( idBl, 0.000000 );
                        var idRGBC = charIDToTypeID( "RGBC" );
                        desc353.putObject( idstrokeColor, idRGBC, desc355 );
                        var idFl = charIDToTypeID( "Fl  " );
                        desc353.putBoolean( idFl, true );
                        var idStrk = charIDToTypeID( "Strk" );
                        desc353.putBoolean( idStrk, false );
                        var idfillFirst = stringIDToTypeID( "fillFirst" );
                        desc353.putBoolean( idfillFirst, true );
                        var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                        desc353.putBoolean( idfillOverPrint, false );
                        var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                        desc353.putBoolean( idstrokeOverPrint, false );
                        var idlineCap = stringIDToTypeID( "lineCap" );
                        var idlineCap = stringIDToTypeID( "lineCap" );
                        var idbuttCap = stringIDToTypeID( "buttCap" );
                        desc353.putEnumerated( idlineCap, idlineCap, idbuttCap );
                        var idlineJoin = stringIDToTypeID( "lineJoin" );
                        var idlineJoin = stringIDToTypeID( "lineJoin" );
                        var idmiterJoin = stringIDToTypeID( "miterJoin" );
                        desc353.putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                        var idlineWidth = stringIDToTypeID( "lineWidth" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc353.putUnitDouble( idlineWidth, idPnt, 0.999875 );
                        var idmiterLimit = stringIDToTypeID( "miterLimit" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc353.putUnitDouble( idmiterLimit, idPnt, 3.999500 );
                        var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                        desc353.putDouble( idlineDashoffset, 0.000000 );
                    var idTxtS = charIDToTypeID( "TxtS" );
                    desc352.putObject( iddefaultStyle, idTxtS, desc353 );
                var idparagraphStyle = stringIDToTypeID( "paragraphStyle" );
                desc351.putObject( idparagraphStyle, idparagraphStyle, desc352 );
            var idparagraphStyleRange = stringIDToTypeID( "paragraphStyleRange" );
            list32.putObject( idparagraphStyleRange, desc351 );
        desc330.putList( idparagraphStyleRange, list32 );
        var idkerningRange = stringIDToTypeID( "kerningRange" );
            var list33 = new ActionList();
        desc330.putList( idkerningRange, list33 );
    var idTxLr = charIDToTypeID( "TxLr" );
    desc329.putObject( idT, idTxLr, desc330 );
executeAction( idsetd, desc329, DialogModes.NO );
}
