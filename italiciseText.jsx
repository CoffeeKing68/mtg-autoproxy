function italiciseText(textboxString, italicStrings){
  var startIndex = []; var endIndex = [];
  // Get the start and end indices of each given string
  for(var i=0;i<italicStrings.length;i++){
    var currentStartIndex = textboxString.indexOf(italicStrings[i]);
    if(currentStartIndex >= 0){
      startIndex.push(currentStartIndex);
      endIndex.push(currentStartIndex + italicStrings[i].length);
    }
  }
  startIndex = startIndex.sort(function (a,b) {return a-b;});
  endIndex = endIndex.sort(function (a,b) {return a-b;});
  // =======================================================
  var idslct = charIDToTypeID( "slct" );
    var desc9 = new ActionDescriptor();
    var idnull = charIDToTypeID( "null" );
        var ref3 = new ActionReference();
        var idLyr = charIDToTypeID( "Lyr " );
        ref3.putName( idLyr, "Rules Text - Left" );
    desc9.putReference( idnull, ref3 );
    var idMkVs = charIDToTypeID( "MkVs" );
    desc9.putBoolean( idMkVs, false );
  executeAction( idslct, desc9, DialogModes.NO );

  // =======================================================
  var idsetd = charIDToTypeID( "setd" );
      var desc10 = new ActionDescriptor();
      var idnull = charIDToTypeID( "null" );
          var ref4 = new ActionReference();
          var idTxLr = charIDToTypeID( "TxLr" );
          var idOrdn = charIDToTypeID( "Ordn" );
          var idTrgt = charIDToTypeID( "Trgt" );
          ref4.putEnumerated( idTxLr, idOrdn, idTrgt );
      desc10.putReference( idnull, ref4 );
      var idT = charIDToTypeID( "T   " );
          var desc11 = new ActionDescriptor();
          var idTxt = charIDToTypeID( "Txt " );
          desc11.putString( idTxt, textboxString );
          var idwarp = stringIDToTypeID( "warp" );
              var desc12 = new ActionDescriptor();
              var idwarpStyle = stringIDToTypeID( "warpStyle" );
              var idwarpStyle = stringIDToTypeID( "warpStyle" );
              var idwarpNone = stringIDToTypeID( "warpNone" );
              desc12.putEnumerated( idwarpStyle, idwarpStyle, idwarpNone );
              var idwarpValue = stringIDToTypeID( "warpValue" );
              desc12.putDouble( idwarpValue, 0.000000 );
              var idwarpPerspective = stringIDToTypeID( "warpPerspective" );
              desc12.putDouble( idwarpPerspective, 0.000000 );
              var idwarpPerspectiveOther = stringIDToTypeID( "warpPerspectiveOther" );
              desc12.putDouble( idwarpPerspectiveOther, 0.000000 );
              var idwarpRotate = stringIDToTypeID( "warpRotate" );
              var idOrnt = charIDToTypeID( "Ornt" );
              var idHrzn = charIDToTypeID( "Hrzn" );
              desc12.putEnumerated( idwarpRotate, idOrnt, idHrzn );
          var idwarp = stringIDToTypeID( "warp" );
          desc11.putObject( idwarp, idwarp, desc12 );
          var idtextGridding = stringIDToTypeID( "textGridding" );
          var idtextGridding = stringIDToTypeID( "textGridding" );
          var idNone = charIDToTypeID( "None" );
          desc11.putEnumerated( idtextGridding, idtextGridding, idNone );
          var idOrnt = charIDToTypeID( "Ornt" );
          var idOrnt = charIDToTypeID( "Ornt" );
          var idHrzn = charIDToTypeID( "Hrzn" );
          desc11.putEnumerated( idOrnt, idOrnt, idHrzn );
          var idAntA = charIDToTypeID( "AntA" );
          var idAnnt = charIDToTypeID( "Annt" );
          var idantiAliasSharp = stringIDToTypeID( "antiAliasSharp" );
          desc11.putEnumerated( idAntA, idAnnt, idantiAliasSharp );
          var idtextShape = stringIDToTypeID( "textShape" );
              var list1 = new ActionList();
                  var desc13 = new ActionDescriptor();
                  var idTEXT = charIDToTypeID( "TEXT" );
                  var idTEXT = charIDToTypeID( "TEXT" );
                  var idbox = stringIDToTypeID( "box" );
                  desc13.putEnumerated( idTEXT, idTEXT, idbox );
                  var idOrnt = charIDToTypeID( "Ornt" );
                  var idOrnt = charIDToTypeID( "Ornt" );
                  var idHrzn = charIDToTypeID( "Hrzn" );
                  desc13.putEnumerated( idOrnt, idOrnt, idHrzn );
                  var idTrnf = charIDToTypeID( "Trnf" );
                      var desc14 = new ActionDescriptor();
                      var idxx = stringIDToTypeID( "xx" );
                      desc14.putDouble( idxx, 1.000000 );
                      var idxy = stringIDToTypeID( "xy" );
                      desc14.putDouble( idxy, 0.000000 );
                      var idyx = stringIDToTypeID( "yx" );
                      desc14.putDouble( idyx, 0.000000 );
                      var idyy = stringIDToTypeID( "yy" );
                      desc14.putDouble( idyy, 1.000000 );
                      var idtx = stringIDToTypeID( "tx" );
                      desc14.putDouble( idtx, 0.000000 );
                      var idty = stringIDToTypeID( "ty" );
                      desc14.putDouble( idty, 0.000000 );
                  var idTrnf = charIDToTypeID( "Trnf" );
                  desc13.putObject( idTrnf, idTrnf, desc14 );
                  var idrowCount = stringIDToTypeID( "rowCount" );
                  desc13.putInteger( idrowCount, 1 );
                  var idcolumnCount = stringIDToTypeID( "columnCount" );
                  desc13.putInteger( idcolumnCount, 1 );
                  var idrowMajorOrder = stringIDToTypeID( "rowMajorOrder" );
                  desc13.putBoolean( idrowMajorOrder, true );
                  var idrowGutter = stringIDToTypeID( "rowGutter" );
                  var idPnt = charIDToTypeID( "#Pnt" );
                  desc13.putUnitDouble( idrowGutter, idPnt, 0.000000 );
                  var idcolumnGutter = stringIDToTypeID( "columnGutter" );
                  var idPnt = charIDToTypeID( "#Pnt" );
                  desc13.putUnitDouble( idcolumnGutter, idPnt, 0.000000 );
                  var idSpcn = charIDToTypeID( "Spcn" );
                  var idPnt = charIDToTypeID( "#Pnt" );
                  desc13.putUnitDouble( idSpcn, idPnt, 0.000000 );
                  var idframeBaselineAlignment = stringIDToTypeID( "frameBaselineAlignment" );
                  var idframeBaselineAlignment = stringIDToTypeID( "frameBaselineAlignment" );
                  var idalignByAscent = stringIDToTypeID( "alignByAscent" );
                  desc13.putEnumerated( idframeBaselineAlignment, idframeBaselineAlignment, idalignByAscent );
                  var idfirstBaselineMinimum = stringIDToTypeID( "firstBaselineMinimum" );
                  var idPnt = charIDToTypeID( "#Pnt" );
                  desc13.putUnitDouble( idfirstBaselineMinimum, idPnt, 0.000000 );
                  var idbounds = stringIDToTypeID( "bounds" );
                      var desc15 = new ActionDescriptor();
                      var idTop = charIDToTypeID( "Top " );
                      desc15.putDouble( idTop, 0.000000 );
                      var idLeft = charIDToTypeID( "Left" );
                      desc15.putDouble( idLeft, 0.000000 );
                      var idBtom = charIDToTypeID( "Btom" );
                      desc15.putDouble( idBtom, 484.668243 );
                      var idRght = charIDToTypeID( "Rght" );
                      desc15.putDouble( idRght, 1092.033325 );
                  var idRctn = charIDToTypeID( "Rctn" );
                  desc13.putObject( idbounds, idRctn, desc15 );
              var idtextShape = stringIDToTypeID( "textShape" );
              list1.putObject( idtextShape, desc13 );
          desc11.putList( idtextShape, list1 );
      var originIndex = 0;
      var desc16 = [];
      var desc17 = [];
      var desc18 = [];
      var desc19 = [];
      var desc20 = [];
      var desc21 = [];
      var desc22 = [];
      var desc23 = [];
      for(var i=0;i<startIndex.length;i++){
        var idTxtt = charIDToTypeID( "Txtt" );
            if(i>0){
              list2.putObject( idTxtt, desc20[i-1] );
            }
            else{
              var list2 = new ActionList();
            }
                desc16[desc16.length] = new ActionDescriptor();
                var idFrom = charIDToTypeID( "From" );
                desc16[i].putInteger( idFrom, originIndex );
                var idT = charIDToTypeID( "T   " );
                desc16[i].putInteger( idT, startIndex[i] );
                var idTxtS = charIDToTypeID( "TxtS" );
                    desc17[desc17.length] = new ActionDescriptor();
                    var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                    desc17[i].putBoolean( idstyleSheetHasParent, true );
                    var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                    desc17[i].putString( idfontPostScriptName, "MPlantin" );
                    var idFntN = charIDToTypeID( "FntN" );
                    desc17[i].putString( idFntN, "MPlantin" );
                    var idFntS = charIDToTypeID( "FntS" );
                    desc17[i].putString( idFntS, "Regular" );
                    var idScrp = charIDToTypeID( "Scrp" );
                    desc17[i].putInteger( idScrp, 0 );
                    var idFntT = charIDToTypeID( "FntT" );
                    desc17[i].putInteger( idFntT, 1 );
                    var idSz = charIDToTypeID( "Sz  " );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc17[i].putUnitDouble( idSz, idPnt, 66.739443 );
                    var idHrzS = charIDToTypeID( "HrzS" );
                    desc17[i].putDouble( idHrzS, 100.000000 );
                    var idVrtS = charIDToTypeID( "VrtS" );
                    desc17[i].putDouble( idVrtS, 100.000000 );
                    var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                    desc17[i].putBoolean( idsyntheticBold, false );
                    var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                    desc17[i].putBoolean( idsyntheticItalic, false );
                    var idautoLeading = stringIDToTypeID( "autoLeading" );
                    desc17[i].putBoolean( idautoLeading, false );
                    var idLdng = charIDToTypeID( "Ldng" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc17[i].putUnitDouble( idLdng, idPnt, 66.739443 );
                    var idTrck = charIDToTypeID( "Trck" );
                    desc17[i].putInteger( idTrck, 0 );
                    var idBsln = charIDToTypeID( "Bsln" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc17[i].putUnitDouble( idBsln, idPnt, 0.000000 );
                    var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                    desc17[i].putDouble( idcharacterRotation, 0.000000 );
                    var idAtKr = charIDToTypeID( "AtKr" );
                    var idAtKr = charIDToTypeID( "AtKr" );
                    var idmetricsKern = stringIDToTypeID( "metricsKern" );
                    desc17[i].putEnumerated( idAtKr, idAtKr, idmetricsKern );
                    var idfontCaps = stringIDToTypeID( "fontCaps" );
                    var idfontCaps = stringIDToTypeID( "fontCaps" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc17[i].putEnumerated( idfontCaps, idfontCaps, idNrml );
                    var idbaseline = stringIDToTypeID( "baseline" );
                    var idbaseline = stringIDToTypeID( "baseline" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc17[i].putEnumerated( idbaseline, idbaseline, idNrml );
                    var idotbaseline = stringIDToTypeID( "otbaseline" );
                    var idotbaseline = stringIDToTypeID( "otbaseline" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc17[i].putEnumerated( idotbaseline, idotbaseline, idNrml );
                    var idstrikethrough = stringIDToTypeID( "strikethrough" );
                    var idstrikethrough = stringIDToTypeID( "strikethrough" );
                    var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                    desc17[i].putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                    var idUndl = charIDToTypeID( "Undl" );
                    var idUndl = charIDToTypeID( "Undl" );
                    var idunderlineOff = stringIDToTypeID( "underlineOff" );
                    desc17[i].putEnumerated( idUndl, idUndl, idunderlineOff );
                    var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc17[i].putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                    var idligature = stringIDToTypeID( "ligature" );
                    desc17[i].putBoolean( idligature, true );
                    var idaltligature = stringIDToTypeID( "altligature" );
                    desc17[i].putBoolean( idaltligature, false );
                    var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                    desc17[i].putBoolean( idcontextualLigatures, true );
                    var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                    desc17[i].putBoolean( idalternateLigatures, false );
                    var idoldStyle = stringIDToTypeID( "oldStyle" );
                    desc17[i].putBoolean( idoldStyle, false );
                    var idfractions = stringIDToTypeID( "fractions" );
                    desc17[i].putBoolean( idfractions, false );
                    var idordinals = stringIDToTypeID( "ordinals" );
                    desc17[i].putBoolean( idordinals, false );
                    var idswash = stringIDToTypeID( "swash" );
                    desc17[i].putBoolean( idswash, false );
                    var idtitling = stringIDToTypeID( "titling" );
                    desc17[i].putBoolean( idtitling, false );
                    var idconnectionForms = stringIDToTypeID( "connectionForms" );
                    desc17[i].putBoolean( idconnectionForms, true );
                    var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                    desc17[i].putBoolean( idstylisticAlternates, false );
                    var idornaments = stringIDToTypeID( "ornaments" );
                    desc17[i].putBoolean( idornaments, false );
                    var idfigureStyle = stringIDToTypeID( "figureStyle" );
                    var idfigureStyle = stringIDToTypeID( "figureStyle" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc17[i].putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                    var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                    desc17[i].putBoolean( idproportionalMetrics, false );
                    var idkana = stringIDToTypeID( "kana" );
                    desc17[i].putBoolean( idkana, false );
                    var iditalics = stringIDToTypeID( "italics" );
                    desc17[i].putBoolean( iditalics, false );
                    var idruby = stringIDToTypeID( "ruby" );
                    desc17[i].putBoolean( idruby, false );
                    var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                    var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                    var idwithStream = stringIDToTypeID( "withStream" );
                    desc17[i].putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                    desc17[i].putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                    var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                    var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                    var iddefaultForm = stringIDToTypeID( "defaultForm" );
                    desc17[i].putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
                    var idmojiZume = stringIDToTypeID( "mojiZume" );
                    desc17[i].putDouble( idmojiZume, 0.000000 );
                    var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                    var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                    var idroman = stringIDToTypeID( "roman" );
                    desc17[i].putEnumerated( idgridAlignment, idgridAlignment, idroman );
                    var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                    desc17[i].putBoolean( idenableWariChu, false );
                    var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                    desc17[i].putInteger( idwariChuCount, 2 );
                    var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                    desc17[i].putInteger( idwariChuLineGap, 0 );
                    var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                    desc17[i].putDouble( idwariChuScale, 0.500000 );
                    var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                    desc17[i].putInteger( idwariChuWidow, 2 );
                    var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                    desc17[i].putInteger( idwariChuOrphan, 2 );
                    var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                    var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                    var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                    desc17[i].putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                    var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                    desc17[i].putInteger( idtcyUpDown, 0 );
                    var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                    desc17[i].putInteger( idtcyLeftRight, 0 );
                    var idleftAki = stringIDToTypeID( "leftAki" );
                    desc17[i].putDouble( idleftAki, -1.000000 );
                    var idrightAki = stringIDToTypeID( "rightAki" );
                    desc17[i].putDouble( idrightAki, -1.000000 );
                    var idjiDori = stringIDToTypeID( "jiDori" );
                    desc17[i].putInteger( idjiDori, 0 );
                    var idnoBreak = stringIDToTypeID( "noBreak" );
                    desc17[i].putBoolean( idnoBreak, false );
                    var idClr = charIDToTypeID( "Clr " );
                        desc18[desc18.length] = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc18[i].putDouble( idRd, 0.999600 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc18[i].putDouble( idGrn, 0.991950 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc18[i].putDouble( idBl, 0.971550 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc17[i].putObject( idClr, idRGBC, desc18[i] );
                    var idstrokeColor = stringIDToTypeID( "strokeColor" );
                        desc19[desc19.length] = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc19[i].putDouble( idRd, 0.000000 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc19[i].putDouble( idGrn, 0.000000 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc19[i].putDouble( idBl, 0.000000 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc17[i].putObject( idstrokeColor, idRGBC, desc19[i] );
                    var idFl = charIDToTypeID( "Fl  " );
                    desc17[i].putBoolean( idFl, true );
                    var idStrk = charIDToTypeID( "Strk" );
                    desc17[i].putBoolean( idStrk, false );
                    var idfillFirst = stringIDToTypeID( "fillFirst" );
                    desc17[i].putBoolean( idfillFirst, false );
                    var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                    desc17[i].putBoolean( idfillOverPrint, false );
                    var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                    desc17[i].putBoolean( idstrokeOverPrint, false );
                    var idlineCap = stringIDToTypeID( "lineCap" );
                    var idlineCap = stringIDToTypeID( "lineCap" );
                    var idbuttCap = stringIDToTypeID( "buttCap" );
                    desc17[i].putEnumerated( idlineCap, idlineCap, idbuttCap );
                    var idlineJoin = stringIDToTypeID( "lineJoin" );
                    var idlineJoin = stringIDToTypeID( "lineJoin" );
                    var idmiterJoin = stringIDToTypeID( "miterJoin" );
                    desc17[i].putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                    var idlineWidth = stringIDToTypeID( "lineWidth" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc17[i].putUnitDouble( idlineWidth, idPnt, 0.009999 );
                    var idmiterLimit = stringIDToTypeID( "miterLimit" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc17[i].putUnitDouble( idmiterLimit, idPnt, 0.009999 );
                    var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                    desc17[i].putDouble( idlineDashoffset, 0.000000 );
                var idTxtS = charIDToTypeID( "TxtS" );
                desc16[i].putObject( idTxtS, idTxtS, desc17[i] );

            var idTxtt = charIDToTypeID( "Txtt" );
            list2.putObject( idTxtt, desc16[i] );
                desc20[desc20.length] = new ActionDescriptor();
                var idFrom = charIDToTypeID( "From" );
                desc20[i].putInteger( idFrom, startIndex[i] );
                var idT = charIDToTypeID( "T   " );
                desc20[i].putInteger( idT, endIndex[i] );
                var idTxtS = charIDToTypeID( "TxtS" );
                    desc21[desc21.length] = new ActionDescriptor();
                    var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                    desc21[i].putBoolean( idstyleSheetHasParent, true );
                    var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                    desc21[i].putString( idfontPostScriptName, "MPlantin-Italic" );
                    var idFntN = charIDToTypeID( "FntN" );
                    desc21[i].putString( idFntN, "MPlantin-Italic" );
                    var idFntS = charIDToTypeID( "FntS" );
                    desc21[i].putString( idFntS, "Regular" );
                    var idScrp = charIDToTypeID( "Scrp" );
                    desc21[i].putInteger( idScrp, 0 );
                    var idFntT = charIDToTypeID( "FntT" );
                    desc21[i].putInteger( idFntT, 1 );
                    var idSz = charIDToTypeID( "Sz  " );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc21[i].putUnitDouble( idSz, idPnt, 66.739443 );
                    var idHrzS = charIDToTypeID( "HrzS" );
                    desc21[i].putDouble( idHrzS, 100.000000 );
                    var idVrtS = charIDToTypeID( "VrtS" );
                    desc21[i].putDouble( idVrtS, 100.000000 );
                    var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                    desc21[i].putBoolean( idsyntheticBold, false );
                    var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                    desc21[i].putBoolean( idsyntheticItalic, false );
                    var idautoLeading = stringIDToTypeID( "autoLeading" );
                    desc21[i].putBoolean( idautoLeading, false );
                    var idLdng = charIDToTypeID( "Ldng" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc21[i].putUnitDouble( idLdng, idPnt, 66.739443 );
                    var idTrck = charIDToTypeID( "Trck" );
                    desc21[i].putInteger( idTrck, 0 );
                    var idBsln = charIDToTypeID( "Bsln" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc21[i].putUnitDouble( idBsln, idPnt, 0.000000 );
                    var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                    desc21[i].putDouble( idcharacterRotation, 0.000000 );
                    var idAtKr = charIDToTypeID( "AtKr" );
                    var idAtKr = charIDToTypeID( "AtKr" );
                    var idmetricsKern = stringIDToTypeID( "metricsKern" );
                    desc21[i].putEnumerated( idAtKr, idAtKr, idmetricsKern );
                    var idfontCaps = stringIDToTypeID( "fontCaps" );
                    var idfontCaps = stringIDToTypeID( "fontCaps" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc21[i].putEnumerated( idfontCaps, idfontCaps, idNrml );
                    var idbaseline = stringIDToTypeID( "baseline" );
                    var idbaseline = stringIDToTypeID( "baseline" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc21[i].putEnumerated( idbaseline, idbaseline, idNrml );
                    var idotbaseline = stringIDToTypeID( "otbaseline" );
                    var idotbaseline = stringIDToTypeID( "otbaseline" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc21[i].putEnumerated( idotbaseline, idotbaseline, idNrml );
                    var idstrikethrough = stringIDToTypeID( "strikethrough" );
                    var idstrikethrough = stringIDToTypeID( "strikethrough" );
                    var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                    desc21[i].putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                    var idUndl = charIDToTypeID( "Undl" );
                    var idUndl = charIDToTypeID( "Undl" );
                    var idunderlineOff = stringIDToTypeID( "underlineOff" );
                    desc21[i].putEnumerated( idUndl, idUndl, idunderlineOff );
                    var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc21[i].putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                    var idligature = stringIDToTypeID( "ligature" );
                    desc21[i].putBoolean( idligature, true );
                    var idaltligature = stringIDToTypeID( "altligature" );
                    desc21[i].putBoolean( idaltligature, false );
                    var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                    desc21[i].putBoolean( idcontextualLigatures, true );
                    var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                    desc21[i].putBoolean( idalternateLigatures, false );
                    var idoldStyle = stringIDToTypeID( "oldStyle" );
                    desc21[i].putBoolean( idoldStyle, false );
                    var idfractions = stringIDToTypeID( "fractions" );
                    desc21[i].putBoolean( idfractions, false );
                    var idordinals = stringIDToTypeID( "ordinals" );
                    desc21[i].putBoolean( idordinals, false );
                    var idswash = stringIDToTypeID( "swash" );
                    desc21[i].putBoolean( idswash, false );
                    var idtitling = stringIDToTypeID( "titling" );
                    desc21[i].putBoolean( idtitling, false );
                    var idconnectionForms = stringIDToTypeID( "connectionForms" );
                    desc21[i].putBoolean( idconnectionForms, true );
                    var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                    desc21[i].putBoolean( idstylisticAlternates, false );
                    var idornaments = stringIDToTypeID( "ornaments" );
                    desc21[i].putBoolean( idornaments, false );
                    var idfigureStyle = stringIDToTypeID( "figureStyle" );
                    var idfigureStyle = stringIDToTypeID( "figureStyle" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc21[i].putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                    var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                    desc21[i].putBoolean( idproportionalMetrics, false );
                    var idkana = stringIDToTypeID( "kana" );
                    desc21[i].putBoolean( idkana, false );
                    var iditalics = stringIDToTypeID( "italics" );
                    desc21[i].putBoolean( iditalics, false );
                    var idruby = stringIDToTypeID( "ruby" );
                    desc21[i].putBoolean( idruby, false );
                    var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                    var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                    var idwithStream = stringIDToTypeID( "withStream" );
                    desc21[i].putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                    desc21[i].putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                    var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                    var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                    var iddefaultForm = stringIDToTypeID( "defaultForm" );
                    desc21[i].putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
                    var idmojiZume = stringIDToTypeID( "mojiZume" );
                    desc21[i].putDouble( idmojiZume, 0.000000 );
                    var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                    var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                    var idroman = stringIDToTypeID( "roman" );
                    desc21[i].putEnumerated( idgridAlignment, idgridAlignment, idroman );
                    var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                    desc21[i].putBoolean( idenableWariChu, false );
                    var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                    desc21[i].putInteger( idwariChuCount, 2 );
                    var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                    desc21[i].putInteger( idwariChuLineGap, 0 );
                    var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                    desc21[i].putDouble( idwariChuScale, 0.500000 );
                    var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                    desc21[i].putInteger( idwariChuWidow, 2 );
                    var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                    desc21[i].putInteger( idwariChuOrphan, 2 );
                    var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                    var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                    var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                    desc21[i].putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                    var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                    desc21[i].putInteger( idtcyUpDown, 0 );
                    var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                    desc21[i].putInteger( idtcyLeftRight, 0 );
                    var idleftAki = stringIDToTypeID( "leftAki" );
                    desc21[i].putDouble( idleftAki, -1.000000 );
                    var idrightAki = stringIDToTypeID( "rightAki" );
                    desc21[i].putDouble( idrightAki, -1.000000 );
                    var idjiDori = stringIDToTypeID( "jiDori" );
                    desc21[i].putInteger( idjiDori, 0 );
                    var idnoBreak = stringIDToTypeID( "noBreak" );
                    desc21[i].putBoolean( idnoBreak, false );
                    var idClr = charIDToTypeID( "Clr " );
                        desc22[desc22.length] = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc22[i].putDouble( idRd, 0.999600 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc22[i].putDouble( idGrn, 0.991950 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc22[i].putDouble( idBl, 0.971550 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc21[i].putObject( idClr, idRGBC, desc22[i] );
                    var idstrokeColor = stringIDToTypeID( "strokeColor" );
                        desc23[desc23.length] = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc23[i].putDouble( idRd, 0.000000 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc23[i].putDouble( idGrn, 0.000000 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc23[i].putDouble( idBl, 0.000000 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc21[i].putObject( idstrokeColor, idRGBC, desc23[i] );
                    var idFl = charIDToTypeID( "Fl  " );
                    desc21[i].putBoolean( idFl, true );
                    var idStrk = charIDToTypeID( "Strk" );
                    desc21[i].putBoolean( idStrk, false );
                    var idfillFirst = stringIDToTypeID( "fillFirst" );
                    desc21[i].putBoolean( idfillFirst, false );
                    var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                    desc21[i].putBoolean( idfillOverPrint, false );
                    var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                    desc21[i].putBoolean( idstrokeOverPrint, false );
                    var idlineCap = stringIDToTypeID( "lineCap" );
                    var idlineCap = stringIDToTypeID( "lineCap" );
                    var idbuttCap = stringIDToTypeID( "buttCap" );
                    desc21[i].putEnumerated( idlineCap, idlineCap, idbuttCap );
                    var idlineJoin = stringIDToTypeID( "lineJoin" );
                    var idlineJoin = stringIDToTypeID( "lineJoin" );
                    var idmiterJoin = stringIDToTypeID( "miterJoin" );
                    desc21[i].putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                    var idlineWidth = stringIDToTypeID( "lineWidth" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc21[i].putUnitDouble( idlineWidth, idPnt, 0.009999 );
                    var idmiterLimit = stringIDToTypeID( "miterLimit" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc21[i].putUnitDouble( idmiterLimit, idPnt, 0.009999 );
                    var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                    desc21[i].putDouble( idlineDashoffset, 0.000000 );
                var idTxtS = charIDToTypeID( "TxtS" );
                desc20[i].putObject( idTxtS, idTxtS, desc21[i] );
                originIndex = endIndex[i];
      }
      var idTxtt = charIDToTypeID( "Txtt" );
      list2.putObject( idTxtt, desc20[ startIndex.length - 1 ] );
          var desc32 = new ActionDescriptor();
          var idFrom = charIDToTypeID( "From" );
          desc32.putInteger( idFrom, originIndex );
          var idT = charIDToTypeID( "T   " );
          desc32.putInteger( idT, textboxString.length );
          var idTxtS = charIDToTypeID( "TxtS" );
              var desc33 = new ActionDescriptor();
              var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
              desc33.putBoolean( idstyleSheetHasParent, true );
              var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
              desc33.putString( idfontPostScriptName, "MPlantin" );
              var idFntN = charIDToTypeID( "FntN" );
              desc33.putString( idFntN, "MPlantin" );
              var idFntS = charIDToTypeID( "FntS" );
              desc33.putString( idFntS, "Regular" );
              var idScrp = charIDToTypeID( "Scrp" );
              desc33.putInteger( idScrp, 0 );
              var idFntT = charIDToTypeID( "FntT" );
              desc33.putInteger( idFntT, 1 );
              var idSz = charIDToTypeID( "Sz  " );
              var idPnt = charIDToTypeID( "#Pnt" );
              desc33.putUnitDouble( idSz, idPnt, 66.739443 );
              var idHrzS = charIDToTypeID( "HrzS" );
              desc33.putDouble( idHrzS, 100.000000 );
              var idVrtS = charIDToTypeID( "VrtS" );
              desc33.putDouble( idVrtS, 100.000000 );
              var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
              desc33.putBoolean( idsyntheticBold, false );
              var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
              desc33.putBoolean( idsyntheticItalic, false );
              var idautoLeading = stringIDToTypeID( "autoLeading" );
              desc33.putBoolean( idautoLeading, false );
              var idLdng = charIDToTypeID( "Ldng" );
              var idPnt = charIDToTypeID( "#Pnt" );
              desc33.putUnitDouble( idLdng, idPnt, 66.739443 );
              var idTrck = charIDToTypeID( "Trck" );
              desc33.putInteger( idTrck, 0 );
              var idBsln = charIDToTypeID( "Bsln" );
              var idPnt = charIDToTypeID( "#Pnt" );
              desc33.putUnitDouble( idBsln, idPnt, 0.000000 );
              var idcharacterRotation = stringIDToTypeID( "characterRotation" );
              desc33.putDouble( idcharacterRotation, 0.000000 );
              var idAtKr = charIDToTypeID( "AtKr" );
              var idAtKr = charIDToTypeID( "AtKr" );
              var idmetricsKern = stringIDToTypeID( "metricsKern" );
              desc33.putEnumerated( idAtKr, idAtKr, idmetricsKern );
              var idfontCaps = stringIDToTypeID( "fontCaps" );
              var idfontCaps = stringIDToTypeID( "fontCaps" );
              var idNrml = charIDToTypeID( "Nrml" );
              desc33.putEnumerated( idfontCaps, idfontCaps, idNrml );
              var idbaseline = stringIDToTypeID( "baseline" );
              var idbaseline = stringIDToTypeID( "baseline" );
              var idNrml = charIDToTypeID( "Nrml" );
              desc33.putEnumerated( idbaseline, idbaseline, idNrml );
              var idotbaseline = stringIDToTypeID( "otbaseline" );
              var idotbaseline = stringIDToTypeID( "otbaseline" );
              var idNrml = charIDToTypeID( "Nrml" );
              desc33.putEnumerated( idotbaseline, idotbaseline, idNrml );
              var idstrikethrough = stringIDToTypeID( "strikethrough" );
              var idstrikethrough = stringIDToTypeID( "strikethrough" );
              var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
              desc33.putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
              var idUndl = charIDToTypeID( "Undl" );
              var idUndl = charIDToTypeID( "Undl" );
              var idunderlineOff = stringIDToTypeID( "underlineOff" );
              desc33.putEnumerated( idUndl, idUndl, idunderlineOff );
              var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
              var idPnt = charIDToTypeID( "#Pnt" );
              desc33.putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
              var idligature = stringIDToTypeID( "ligature" );
              desc33.putBoolean( idligature, true );
              var idaltligature = stringIDToTypeID( "altligature" );
              desc33.putBoolean( idaltligature, false );
              var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
              desc33.putBoolean( idcontextualLigatures, true );
              var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
              desc33.putBoolean( idalternateLigatures, false );
              var idoldStyle = stringIDToTypeID( "oldStyle" );
              desc33.putBoolean( idoldStyle, false );
              var idfractions = stringIDToTypeID( "fractions" );
              desc33.putBoolean( idfractions, false );
              var idordinals = stringIDToTypeID( "ordinals" );
              desc33.putBoolean( idordinals, false );
              var idswash = stringIDToTypeID( "swash" );
              desc33.putBoolean( idswash, false );
              var idtitling = stringIDToTypeID( "titling" );
              desc33.putBoolean( idtitling, false );
              var idconnectionForms = stringIDToTypeID( "connectionForms" );
              desc33.putBoolean( idconnectionForms, true );
              var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
              desc33.putBoolean( idstylisticAlternates, false );
              var idornaments = stringIDToTypeID( "ornaments" );
              desc33.putBoolean( idornaments, false );
              var idfigureStyle = stringIDToTypeID( "figureStyle" );
              var idfigureStyle = stringIDToTypeID( "figureStyle" );
              var idNrml = charIDToTypeID( "Nrml" );
              desc33.putEnumerated( idfigureStyle, idfigureStyle, idNrml );
              var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
              desc33.putBoolean( idproportionalMetrics, false );
              var idkana = stringIDToTypeID( "kana" );
              desc33.putBoolean( idkana, false );
              var iditalics = stringIDToTypeID( "italics" );
              desc33.putBoolean( iditalics, false );
              var idruby = stringIDToTypeID( "ruby" );
              desc33.putBoolean( idruby, false );
              var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
              var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
              var idwithStream = stringIDToTypeID( "withStream" );
              desc33.putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
              var idtextLanguage = stringIDToTypeID( "textLanguage" );
              var idtextLanguage = stringIDToTypeID( "textLanguage" );
              var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
              desc33.putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
              var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
              var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
              var iddefaultForm = stringIDToTypeID( "defaultForm" );
              desc33.putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
              var idmojiZume = stringIDToTypeID( "mojiZume" );
              desc33.putDouble( idmojiZume, 0.000000 );
              var idgridAlignment = stringIDToTypeID( "gridAlignment" );
              var idgridAlignment = stringIDToTypeID( "gridAlignment" );
              var idroman = stringIDToTypeID( "roman" );
              desc33.putEnumerated( idgridAlignment, idgridAlignment, idroman );
              var idenableWariChu = stringIDToTypeID( "enableWariChu" );
              desc33.putBoolean( idenableWariChu, false );
              var idwariChuCount = stringIDToTypeID( "wariChuCount" );
              desc33.putInteger( idwariChuCount, 2 );
              var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
              desc33.putInteger( idwariChuLineGap, 0 );
              var idwariChuScale = stringIDToTypeID( "wariChuScale" );
              desc33.putDouble( idwariChuScale, 0.500000 );
              var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
              desc33.putInteger( idwariChuWidow, 2 );
              var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
              desc33.putInteger( idwariChuOrphan, 2 );
              var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
              var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
              var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
              desc33.putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
              var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
              desc33.putInteger( idtcyUpDown, 0 );
              var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
              desc33.putInteger( idtcyLeftRight, 0 );
              var idleftAki = stringIDToTypeID( "leftAki" );
              desc33.putDouble( idleftAki, -1.000000 );
              var idrightAki = stringIDToTypeID( "rightAki" );
              desc33.putDouble( idrightAki, -1.000000 );
              var idjiDori = stringIDToTypeID( "jiDori" );
              desc33.putInteger( idjiDori, 0 );
              var idnoBreak = stringIDToTypeID( "noBreak" );
              desc33.putBoolean( idnoBreak, false );
              var idClr = charIDToTypeID( "Clr " );
                  var desc34 = new ActionDescriptor();
                  var idRd = charIDToTypeID( "Rd  " );
                  desc34.putDouble( idRd, 0.999600 );
                  var idGrn = charIDToTypeID( "Grn " );
                  desc34.putDouble( idGrn, 0.991950 );
                  var idBl = charIDToTypeID( "Bl  " );
                  desc34.putDouble( idBl, 0.971550 );
              var idRGBC = charIDToTypeID( "RGBC" );
              desc33.putObject( idClr, idRGBC, desc34 );
              var idstrokeColor = stringIDToTypeID( "strokeColor" );
                  var desc35 = new ActionDescriptor();
                  var idRd = charIDToTypeID( "Rd  " );
                  desc35.putDouble( idRd, 0.000000 );
                  var idGrn = charIDToTypeID( "Grn " );
                  desc35.putDouble( idGrn, 0.000000 );
                  var idBl = charIDToTypeID( "Bl  " );
                  desc35.putDouble( idBl, 0.000000 );
              var idRGBC = charIDToTypeID( "RGBC" );
              desc33.putObject( idstrokeColor, idRGBC, desc35 );
              var idFl = charIDToTypeID( "Fl  " );
              desc33.putBoolean( idFl, true );
              var idStrk = charIDToTypeID( "Strk" );
              desc33.putBoolean( idStrk, false );
              var idfillFirst = stringIDToTypeID( "fillFirst" );
              desc33.putBoolean( idfillFirst, false );
              var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
              desc33.putBoolean( idfillOverPrint, false );
              var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
              desc33.putBoolean( idstrokeOverPrint, false );
              var idlineCap = stringIDToTypeID( "lineCap" );
              var idlineCap = stringIDToTypeID( "lineCap" );
              var idbuttCap = stringIDToTypeID( "buttCap" );
              desc33.putEnumerated( idlineCap, idlineCap, idbuttCap );
              var idlineJoin = stringIDToTypeID( "lineJoin" );
              var idlineJoin = stringIDToTypeID( "lineJoin" );
              var idmiterJoin = stringIDToTypeID( "miterJoin" );
              desc33.putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
              var idlineWidth = stringIDToTypeID( "lineWidth" );
              var idPnt = charIDToTypeID( "#Pnt" );
              desc33.putUnitDouble( idlineWidth, idPnt, 0.009999 );
              var idmiterLimit = stringIDToTypeID( "miterLimit" );
              var idPnt = charIDToTypeID( "#Pnt" );
              desc33.putUnitDouble( idmiterLimit, idPnt, 0.009999 );
              var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
              desc33.putDouble( idlineDashoffset, 0.000000 );
          var idTxtS = charIDToTypeID( "TxtS" );
          desc32.putObject( idTxtS, idTxtS, desc33 );
      var idTxtt = charIDToTypeID( "Txtt" );
      list2.putObject( idTxtt, desc32 );
      desc11.putList( idTxtt, list2 );
      var idparagraphStyleRange = stringIDToTypeID( "paragraphStyleRange" );
          var list3 = new ActionList();
              var desc36 = new ActionDescriptor();
              var idFrom = charIDToTypeID( "From" );
              desc36.putInteger( idFrom, 0 );
              var idT = charIDToTypeID( "T   " );
              desc36.putInteger( idT, textboxString.length );
              var idparagraphStyle = stringIDToTypeID( "paragraphStyle" );
                  var desc37 = new ActionDescriptor();
                  var idAlgn = charIDToTypeID( "Algn" );
                  var idAlg = charIDToTypeID( "Alg " );
                  var idLeft = charIDToTypeID( "Left" );
                  desc37.putEnumerated( idAlgn, idAlg, idLeft );
                  var idfirstLineIndent = stringIDToTypeID( "firstLineIndent" );
                  var idPnt = charIDToTypeID( "#Pnt" );
                  desc37.putUnitDouble( idfirstLineIndent, idPnt, 0.000000 );
                  var idstartIndent = stringIDToTypeID( "startIndent" );
                  var idPnt = charIDToTypeID( "#Pnt" );
                  desc37.putUnitDouble( idstartIndent, idPnt, 0.000000 );
                  var idendIndent = stringIDToTypeID( "endIndent" );
                  var idPnt = charIDToTypeID( "#Pnt" );
                  desc37.putUnitDouble( idendIndent, idPnt, 0.000000 );
                  var idspaceBefore = stringIDToTypeID( "spaceBefore" );
                  var idPnt = charIDToTypeID( "#Pnt" );
                  desc37.putUnitDouble( idspaceBefore, idPnt, 16.428175 );
                  var idspaceAfter = stringIDToTypeID( "spaceAfter" );
                  var idPnt = charIDToTypeID( "#Pnt" );
                  desc37.putUnitDouble( idspaceAfter, idPnt, 0.000000 );
                  var iddropCapMultiplier = stringIDToTypeID( "dropCapMultiplier" );
                  desc37.putInteger( iddropCapMultiplier, 1 );
                  var idautoLeadingPercentage = stringIDToTypeID( "autoLeadingPercentage" );
                  desc37.putDouble( idautoLeadingPercentage, 1.200000 );
                  var idleadingType = stringIDToTypeID( "leadingType" );
                  var idleadingType = stringIDToTypeID( "leadingType" );
                  var idleadingBelow = stringIDToTypeID( "leadingBelow" );
                  desc37.putEnumerated( idleadingType, idleadingType, idleadingBelow );
                  var idhyphenate = stringIDToTypeID( "hyphenate" );
                  desc37.putBoolean( idhyphenate, false );
                  var idhyphenateWordSize = stringIDToTypeID( "hyphenateWordSize" );
                  desc37.putInteger( idhyphenateWordSize, 6 );
                  var idhyphenatePreLength = stringIDToTypeID( "hyphenatePreLength" );
                  desc37.putInteger( idhyphenatePreLength, 2 );
                  var idhyphenatePostLength = stringIDToTypeID( "hyphenatePostLength" );
                  desc37.putInteger( idhyphenatePostLength, 2 );
                  var idhyphenateLimit = stringIDToTypeID( "hyphenateLimit" );
                  desc37.putInteger( idhyphenateLimit, 0 );
                  var idhyphenationZone = stringIDToTypeID( "hyphenationZone" );
                  desc37.putDouble( idhyphenationZone, 36.000000 );
                  var idhyphenateCapitalized = stringIDToTypeID( "hyphenateCapitalized" );
                  desc37.putBoolean( idhyphenateCapitalized, true );
                  var idhyphenationPreference = stringIDToTypeID( "hyphenationPreference" );
                  desc37.putDouble( idhyphenationPreference, 0.500000 );
                  var idjustificationWordMinimum = stringIDToTypeID( "justificationWordMinimum" );
                  desc37.putDouble( idjustificationWordMinimum, 0.800000 );
                  var idjustificationWordDesired = stringIDToTypeID( "justificationWordDesired" );
                  desc37.putDouble( idjustificationWordDesired, 1.000000 );
                  var idjustificationWordMaximum = stringIDToTypeID( "justificationWordMaximum" );
                  desc37.putDouble( idjustificationWordMaximum, 1.330000 );
                  var idjustificationLetterMinimum = stringIDToTypeID( "justificationLetterMinimum" );
                  desc37.putDouble( idjustificationLetterMinimum, 0.000000 );
                  var idjustificationLetterDesired = stringIDToTypeID( "justificationLetterDesired" );
                  desc37.putDouble( idjustificationLetterDesired, 0.000000 );
                  var idjustificationLetterMaximum = stringIDToTypeID( "justificationLetterMaximum" );
                  desc37.putDouble( idjustificationLetterMaximum, 0.000000 );
                  var idjustificationGlyphMinimum = stringIDToTypeID( "justificationGlyphMinimum" );
                  desc37.putDouble( idjustificationGlyphMinimum, 1.000000 );
                  var idjustificationGlyphDesired = stringIDToTypeID( "justificationGlyphDesired" );
                  desc37.putDouble( idjustificationGlyphDesired, 1.000000 );
                  var idjustificationGlyphMaximum = stringIDToTypeID( "justificationGlyphMaximum" );
                  desc37.putDouble( idjustificationGlyphMaximum, 1.000000 );
                  var idsingleWordJustification = stringIDToTypeID( "singleWordJustification" );
                  var idAlg = charIDToTypeID( "Alg " );
                  var idJstA = charIDToTypeID( "JstA" );
                  desc37.putEnumerated( idsingleWordJustification, idAlg, idJstA );
                  var idhangingRoman = stringIDToTypeID( "hangingRoman" );
                  desc37.putBoolean( idhangingRoman, false );
                  var idautoTCY = stringIDToTypeID( "autoTCY" );
                  desc37.putInteger( idautoTCY, 1 );
                  var idkeepTogether = stringIDToTypeID( "keepTogether" );
                  desc37.putBoolean( idkeepTogether, false );
                  var idburasagari = stringIDToTypeID( "burasagari" );
                  var idburasagari = stringIDToTypeID( "burasagari" );
                  var idburasagariNone = stringIDToTypeID( "burasagariNone" );
                  desc37.putEnumerated( idburasagari, idburasagari, idburasagariNone );
                  var idpreferredKinsokuOrder = stringIDToTypeID( "preferredKinsokuOrder" );
                  var idpreferredKinsokuOrder = stringIDToTypeID( "preferredKinsokuOrder" );
                  var idpushIn = stringIDToTypeID( "pushIn" );
                  desc37.putEnumerated( idpreferredKinsokuOrder, idpreferredKinsokuOrder, idpushIn );
                  var idkurikaeshiMojiShori = stringIDToTypeID( "kurikaeshiMojiShori" );
                  desc37.putBoolean( idkurikaeshiMojiShori, false );
                  var idtextEveryLineComposer = stringIDToTypeID( "textEveryLineComposer" );
                  desc37.putBoolean( idtextEveryLineComposer, false );
                  var iddefaultTabWidth = stringIDToTypeID( "defaultTabWidth" );
                  desc37.putDouble( iddefaultTabWidth, 36.000000 );
                  var iddefaultStyle = stringIDToTypeID( "defaultStyle" );
                      var desc38 = new ActionDescriptor();
                      var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                      desc38.putString( idfontPostScriptName, "MagicSymbols2008" );
                      var idFntN = charIDToTypeID( "FntN" );
                      desc38.putString( idFntN, "Magic Symbols 2008" );
                      var idFntS = charIDToTypeID( "FntS" );
                      desc38.putString( idFntS, "Regular" );
                      var idScrp = charIDToTypeID( "Scrp" );
                      desc38.putInteger( idScrp, 0 );
                      var idFntT = charIDToTypeID( "FntT" );
                      desc38.putInteger( idFntT, 1 );
                      var idSz = charIDToTypeID( "Sz  " );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc38.putUnitDouble( idSz, idPnt, 11.998500 );
                      var idHrzS = charIDToTypeID( "HrzS" );
                      desc38.putDouble( idHrzS, 100.000000 );
                      var idVrtS = charIDToTypeID( "VrtS" );
                      desc38.putDouble( idVrtS, 100.000000 );
                      var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                      desc38.putBoolean( idsyntheticBold, false );
                      var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                      desc38.putBoolean( idsyntheticItalic, false );
                      var idautoLeading = stringIDToTypeID( "autoLeading" );
                      desc38.putBoolean( idautoLeading, true );
                      var idTrck = charIDToTypeID( "Trck" );
                      desc38.putInteger( idTrck, 0 );
                      var idBsln = charIDToTypeID( "Bsln" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc38.putUnitDouble( idBsln, idPnt, 0.000000 );
                      var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                      desc38.putDouble( idcharacterRotation, 0.000000 );
                      var idAtKr = charIDToTypeID( "AtKr" );
                      var idAtKr = charIDToTypeID( "AtKr" );
                      var idmetricsKern = stringIDToTypeID( "metricsKern" );
                      desc38.putEnumerated( idAtKr, idAtKr, idmetricsKern );
                      var idfontCaps = stringIDToTypeID( "fontCaps" );
                      var idfontCaps = stringIDToTypeID( "fontCaps" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc38.putEnumerated( idfontCaps, idfontCaps, idNrml );
                      var idbaseline = stringIDToTypeID( "baseline" );
                      var idbaseline = stringIDToTypeID( "baseline" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc38.putEnumerated( idbaseline, idbaseline, idNrml );
                      var idotbaseline = stringIDToTypeID( "otbaseline" );
                      var idotbaseline = stringIDToTypeID( "otbaseline" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc38.putEnumerated( idotbaseline, idotbaseline, idNrml );
                      var idstrikethrough = stringIDToTypeID( "strikethrough" );
                      var idstrikethrough = stringIDToTypeID( "strikethrough" );
                      var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                      desc38.putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                      var idUndl = charIDToTypeID( "Undl" );
                      var idUndl = charIDToTypeID( "Undl" );
                      var idunderlineOff = stringIDToTypeID( "underlineOff" );
                      desc38.putEnumerated( idUndl, idUndl, idunderlineOff );
                      var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc38.putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                      var idligature = stringIDToTypeID( "ligature" );
                      desc38.putBoolean( idligature, true );
                      var idaltligature = stringIDToTypeID( "altligature" );
                      desc38.putBoolean( idaltligature, false );
                      var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                      desc38.putBoolean( idcontextualLigatures, false );
                      var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                      desc38.putBoolean( idalternateLigatures, false );
                      var idoldStyle = stringIDToTypeID( "oldStyle" );
                      desc38.putBoolean( idoldStyle, false );
                      var idfractions = stringIDToTypeID( "fractions" );
                      desc38.putBoolean( idfractions, false );
                      var idordinals = stringIDToTypeID( "ordinals" );
                      desc38.putBoolean( idordinals, false );
                      var idswash = stringIDToTypeID( "swash" );
                      desc38.putBoolean( idswash, false );
                      var idtitling = stringIDToTypeID( "titling" );
                      desc38.putBoolean( idtitling, false );
                      var idconnectionForms = stringIDToTypeID( "connectionForms" );
                      desc38.putBoolean( idconnectionForms, false );
                      var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                      desc38.putBoolean( idstylisticAlternates, false );
                      var idornaments = stringIDToTypeID( "ornaments" );
                      desc38.putBoolean( idornaments, false );
                      var idfigureStyle = stringIDToTypeID( "figureStyle" );
                      var idfigureStyle = stringIDToTypeID( "figureStyle" );
                      var idNrml = charIDToTypeID( "Nrml" );
                      desc38.putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                      var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                      desc38.putBoolean( idproportionalMetrics, false );
                      var idkana = stringIDToTypeID( "kana" );
                      desc38.putBoolean( idkana, false );
                      var iditalics = stringIDToTypeID( "italics" );
                      desc38.putBoolean( iditalics, false );
                      var idruby = stringIDToTypeID( "ruby" );
                      desc38.putBoolean( idruby, false );
                      var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                      var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                      var idrotated = stringIDToTypeID( "rotated" );
                      desc38.putEnumerated( idbaselineDirection, idbaselineDirection, idrotated );
                      var idtextLanguage = stringIDToTypeID( "textLanguage" );
                      var idtextLanguage = stringIDToTypeID( "textLanguage" );
                      var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                      desc38.putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                      var idmojiZume = stringIDToTypeID( "mojiZume" );
                      desc38.putDouble( idmojiZume, 0.000000 );
                      var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                      var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                      var idroman = stringIDToTypeID( "roman" );
                      desc38.putEnumerated( idgridAlignment, idgridAlignment, idroman );
                      var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                      desc38.putBoolean( idenableWariChu, false );
                      var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                      desc38.putInteger( idwariChuCount, 2 );
                      var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                      desc38.putInteger( idwariChuLineGap, 0 );
                      var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                      desc38.putDouble( idwariChuScale, 0.500000 );
                      var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                      desc38.putInteger( idwariChuWidow, 2 );
                      var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                      desc38.putInteger( idwariChuOrphan, 2 );
                      var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                      var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                      var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                      desc38.putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                      var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                      desc38.putInteger( idtcyUpDown, 0 );
                      var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                      desc38.putInteger( idtcyLeftRight, 0 );
                      var idleftAki = stringIDToTypeID( "leftAki" );
                      desc38.putDouble( idleftAki, -1.000000 );
                      var idrightAki = stringIDToTypeID( "rightAki" );
                      desc38.putDouble( idrightAki, -1.000000 );
                      var idjiDori = stringIDToTypeID( "jiDori" );
                      desc38.putInteger( idjiDori, 0 );
                      var idnoBreak = stringIDToTypeID( "noBreak" );
                      desc38.putBoolean( idnoBreak, false );
                      var idClr = charIDToTypeID( "Clr " );
                          var desc39 = new ActionDescriptor();
                          var idRd = charIDToTypeID( "Rd  " );
                          desc39.putDouble( idRd, 0.000000 );
                          var idGrn = charIDToTypeID( "Grn " );
                          desc39.putDouble( idGrn, 0.000000 );
                          var idBl = charIDToTypeID( "Bl  " );
                          desc39.putDouble( idBl, 0.000000 );
                      var idRGBC = charIDToTypeID( "RGBC" );
                      desc38.putObject( idClr, idRGBC, desc39 );
                      var idstrokeColor = stringIDToTypeID( "strokeColor" );
                          var desc40 = new ActionDescriptor();
                          var idRd = charIDToTypeID( "Rd  " );
                          desc40.putDouble( idRd, 0.000000 );
                          var idGrn = charIDToTypeID( "Grn " );
                          desc40.putDouble( idGrn, 0.000000 );
                          var idBl = charIDToTypeID( "Bl  " );
                          desc40.putDouble( idBl, 0.000000 );
                      var idRGBC = charIDToTypeID( "RGBC" );
                      desc38.putObject( idstrokeColor, idRGBC, desc40 );
                      var idFl = charIDToTypeID( "Fl  " );
                      desc38.putBoolean( idFl, true );
                      var idStrk = charIDToTypeID( "Strk" );
                      desc38.putBoolean( idStrk, false );
                      var idfillFirst = stringIDToTypeID( "fillFirst" );
                      desc38.putBoolean( idfillFirst, true );
                      var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                      desc38.putBoolean( idfillOverPrint, false );
                      var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                      desc38.putBoolean( idstrokeOverPrint, false );
                      var idlineCap = stringIDToTypeID( "lineCap" );
                      var idlineCap = stringIDToTypeID( "lineCap" );
                      var idbuttCap = stringIDToTypeID( "buttCap" );
                      desc38.putEnumerated( idlineCap, idlineCap, idbuttCap );
                      var idlineJoin = stringIDToTypeID( "lineJoin" );
                      var idlineJoin = stringIDToTypeID( "lineJoin" );
                      var idmiterJoin = stringIDToTypeID( "miterJoin" );
                      desc38.putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                      var idlineWidth = stringIDToTypeID( "lineWidth" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc38.putUnitDouble( idlineWidth, idPnt, 0.999875 );
                      var idmiterLimit = stringIDToTypeID( "miterLimit" );
                      var idPnt = charIDToTypeID( "#Pnt" );
                      desc38.putUnitDouble( idmiterLimit, idPnt, 3.999500 );
                      var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                      desc38.putDouble( idlineDashoffset, 0.000000 );
                  var idTxtS = charIDToTypeID( "TxtS" );
                  desc37.putObject( iddefaultStyle, idTxtS, desc38 );
              var idparagraphStyle = stringIDToTypeID( "paragraphStyle" );
              desc36.putObject( idparagraphStyle, idparagraphStyle, desc37 );
          var idparagraphStyleRange = stringIDToTypeID( "paragraphStyleRange" );
          list3.putObject( idparagraphStyleRange, desc36 );
      desc11.putList( idparagraphStyleRange, list3 );
      var idkerningRange = stringIDToTypeID( "kerningRange" );
          var list4 = new ActionList();
      desc11.putList( idkerningRange, list4 );
    var idTxLr = charIDToTypeID( "TxLr" );
    desc10.putObject( idT, idTxLr, desc11 );
    executeAction( idsetd, desc10, DialogModes.NO );
}
