function insertManaAndItaliciseText(inputString, italicStrings){
//inputString = inputString.concat(" ");
//alert(italicStrings);
//italicStrings[italicStrings.length] = " "
var startIndex = []; var endIndex = [];
// Get the start and end indices of each given string
for(var i=0;i<italicStrings.length;i++){
  var currentStartIndex = inputString.indexOf(italicStrings[i]);
  if(currentStartIndex >= 0){
    startIndex.push(currentStartIndex);
    endIndex.push(currentStartIndex + italicStrings[i].length);
  }
}
startIndex = startIndex.sort(function (a,b) {return a-b;});
endIndex = endIndex.sort(function (a,b) {return a-b;});

// subtract for each linebreak before here, +1
//var numLines = (inputString.match(/\r/g) || []).length;
//alert(startIndex);
for(var i=0;i<startIndex.length;i++){
  var tempString = inputString.slice(0,startIndex[i]);
  var numLines = (inputString.match(/\r/g) || []).length;
  var numColourless = (inputString.match(/{C}/g) || []).length;
  startIndex[i] = startIndex[i]-(numLines+numColourless);
}
//alert(startIndex);
//alert(endIndex);

var rgbW = [252, 254, 219];
var rgbU = [169, 223, 249];
var rgbB = [199, 201, 190];
var rgbR = [243, 146, 114];
var rgbG = [155, 209, 177];

// Find and replace the mana symbols in {} in the string with their MagicSymbols2008
// equivalents, and note their indices and stuff
var symbolsList = ["{T}","{X}","{0}","{1}","{2}","{3}","{4}","{5}","{6}","{7}","{8}","{9}","{W}","{U}","{B}","{R}","{G}","{C}"];
var newSymbols  = ["ot", "ox", "o0", "o1", "o2", "o3", "o4", "o5", "o6", "o7", "o8", "o9", "ow", "ou", "ob", "or", "og", "OC" ];
var inputStringCopy = inputString;
var symbolIndices = [];
var currentMinimum = 0;
var startingIndex = 0;
while(true){
  var braceIndex1 = inputString.indexOf("{",startingIndex);
  var braceIndex2 = inputString.indexOf("}",startingIndex);
  if(braceIndex1 < 0){
    break;
  }
  else{
    var currentSymbol = inputString.slice(braceIndex1,braceIndex2+1);
    for(var i=0;i<symbolsList.length;i++){
      if(currentSymbol.valueOf() == symbolsList[i].valueOf()){
        inputString = inputString.replace(symbolsList[i], newSymbols[i]);
        symbolIndices.push(braceIndex1);
        startingIndex = braceIndex1 + 1;
        break;
      }
    }
  }
}
//alert(symbolIndices);


function arrayIndexOf(inputArray, reqValue, startingIndex){
  var index = -1;
  startingIndex = typeof startingIndex !== 'undefined' ? startingIndex : 0;
  for(var i=startingIndex;i<inputArray.length;i++){
    if(inputArray[i] == reqValue){
      index = inputArray[i];
      break;
    }
  }
  return index;
}


var usefulIndex = 0;
// Turn starting and ending indices for italics, and the indices for
// mana symbols, into something we can actually use
var regularStart = [];
var regularEnd   = [];
var italicsStart = [];
var italicsEnd   = [];
var symbolsStart = [];
var symbolsEnd   = [];
//alert("At top of loop");
var originIndices = [0];
var loopNumber = 10*(symbolIndices.length + startIndex.length);
var italicsCounter = 0;
topLoop:
for(var i=0;i<loopNumber;i++){
  if(startIndex.length == 1 && endIndex[0] - startIndex[0] == 0){
    var italicsIndexOf = -1;
  }
  else{
    var italicsIndexOf = arrayIndexOf(startIndex, originIndices[i], 0);
  }
  var symbolsIndexOf = arrayIndexOf(symbolIndices, originIndices[i], 0);
  if(symbolsIndexOf >= originIndices[i]){
    if(originIndices[i]+2 < inputString.length){
      originIndices.push(originIndices[i]+2);
    }
    regularStart.push(originIndices[i]);
    regularEnd.push(originIndices[i]);
    italicsStart.push(originIndices[i]);
    italicsEnd.push(originIndices[i]);
    symbolsStart.push(originIndices[i]);
    symbolsEnd.push(originIndices[i]+2);
    //alert("Symbol");
    continue topLoop;
  }
  else if(italicsIndexOf >= 0){
    //var currentItalicsIndex = arrayIndexOf(symbolIndices, endIndex[italicsCounter]+1, 0);
    var currentItalicsIndex = arrayIndexOf(symbolIndices, endIndex[italicsCounter] + 1, 0);
    if(currentItalicsIndex >= originIndices[i]){
      if(endIndex[italicsCounter]+3 < inputString.length){
        originIndices.push(endIndex[italicsCounter]+3);
      }
      regularStart.push(startIndex[italicsCounter]);
      regularEnd.push(startIndex[italicsCounter]);
      italicsStart.push(startIndex[italicsCounter]);
      italicsEnd.push(endIndex[italicsCounter]);
      symbolsStart.push(endIndex[italicsCounter]+1);
      symbolsEnd.push(endIndex[italicsCounter]+3);
      //alert("Italics + Symbol");
      italicsCounter = italicsCounter + 1;
      continue topLoop;
    }
    else{
      regularStart.push(startIndex[italicsCounter]);
      regularEnd.push(startIndex[italicsCounter]);
      italicsStart.push(startIndex[italicsCounter]);
      italicsEnd.push(endIndex[italicsCounter]);
      symbolsStart.push(endIndex[italicsCounter]);
      symbolsEnd.push(endIndex[italicsCounter]);
      //alert("Italics");
      italicsCounter = italicsCounter + 1;
      if(endIndex[italicsCounter] < inputString.length){
        originIndices.push(endIndex[italicsCounter]);
      }
      else{
        break topLoop;
      }
      continue topLoop;
    }
  }
  else{
regularLoop:
    for(var j=0;j<10*(inputString.length-originIndices[i]);j++){
      if(startIndex.length == 1 && endIndex[0] - startIndex[0] == 0){
        var italicsIndexOf = -1;
      }
      else{
        var italicsIndexOf = arrayIndexOf(startIndex, j, italicsCounter);
      }
      var symbolsIndexOf = arrayIndexOf(symbolIndices, j, i);
      // seems like it can find the
      if(italicsIndexOf >= j){
        for(var k=j;k<10*(inputString.length-originIndices[i]);k++) {
          var symbolsIndexOf = arrayIndexOf(symbolIndices, k);
          var italicsIndexOf = arrayIndexOf(endIndex, k);
          if(symbolsIndexOf >= originIndices[i]){
            if(symbolsIndexOf+2 < inputString.length){
              originIndices.push(symbolsIndexOf+2);
            }
            regularStart.push(originIndices[i]);
            regularEnd.push(startIndex[italicsCounter]-1);
            italicsStart.push(startIndex[italicsCounter]);
            italicsEnd.push(endIndex[italicsCounter]);
            symbolsStart.push(symbolsIndexOf);
            symbolsEnd.push(symbolsIndexOf+2);
            //alert("Regular + Italics + Symbol");
            italicsCounter = italicsCounter + 1;
            continue topLoop;
          }
          else if(italicsIndexOf >= originIndices[i] ){
            if(endIndex[italicsCounter]+1 < inputString.length){
              originIndices.push(endIndex[italicsCounter]+1);
            }
            regularStart.push(originIndices[i]);
            regularEnd.push(startIndex[italicsCounter]-1);
            italicsStart.push(startIndex[italicsCounter]);
            italicsEnd.push(endIndex[italicsCounter]);
            symbolsStart.push(endIndex[italicsCounter]);
            symbolsEnd.push(endIndex[italicsCounter]);
            //alert("Regular + Italics");
            italicsCounter = italicsCounter + 1;
            continue topLoop;
          }
        }
        regularStart.push(originIndices[i]);
        regularEnd.push(startIndex[italicsCounter]-1);
        italicsStart.push(startIndex[italicsCounter]);
        italicsEnd.push(inputString.length);
        symbolsStart.push(inputString.length);
        symbolsEnd.push(inputString.length);
        //alert("Regular + Italics -> End");
        usefulIndex = i;
        break topLoop;
      }
      else if(symbolsIndexOf >= j){
        if(symbolsIndexOf+2 < inputString.length){
          originIndices.push(symbolsIndexOf+2);
        }
        regularStart.push(originIndices[i]);
        regularEnd.push(symbolsIndexOf-1);
        italicsStart.push(symbolsIndexOf-1);
        italicsEnd.push(symbolsIndexOf-1);
        symbolsStart.push(symbolsIndexOf);
        symbolsEnd.push(symbolsIndexOf+2);
        //alert("Regular + Symbol");
        continue topLoop;
      }
    }
    regularStart.push(originIndices[i]);
    regularEnd.push(inputString.length);
    italicsStart.push(inputString.length);
    italicsEnd.push(inputString.length);
    symbolsStart.push(inputString.length);
    symbolsEnd.push(inputString.length);
    //alert("Regular -> End");
    usefulIndex = i;
    break topLoop;
  }
}

for(var i=0;i<regularStart.length;i++){
  if(regularStart[i] < 0 || regularEnd < 0){
    regularStart[i] = 0; regularEnd[i] = 0;
  }
  if(italicsStart[i] < 0 || italicsEnd < 0){
    italicsStart[i] = 0; italicsEnd[i] = 0;
  }
  if(symbolsStart[i] < 0 || symbolsEnd < 0){
    symbolsStart[i] = 0; symbolsEnd[i] = 0;
  }
}

/*
alert(regularStart);
alert(regularEnd);
alert(italicsStart);
alert(italicsEnd);
alert(symbolsStart);
alert(symbolsEnd);
*/
/*
inputString = inputString + "\r" + "Pl";
regularStart[usefulIndex+1] = (inputString.length-4);
regularEnd[usefulIndex+1] = (inputString.length-4);
italicsStart[usefulIndex+1] = (inputString.length-4);
italicsEnd[usefulIndex+1] = (inputString.length);
symbolsStart[usefulIndex+1] = (inputString.length);
symbolsEnd[usefulIndex+1] = (inputString.length);
*/

// =======================================================
// Select the left text layer
var idslct = charIDToTypeID( "slct" );
    var desc118 = new ActionDescriptor();
    var idnull = charIDToTypeID( "null" );
        var ref23 = new ActionReference();
        var idLyr = charIDToTypeID( "Lyr " );
        ref23.putName( idLyr, "Rules Text - Left" );
    desc118.putReference( idnull, ref23 );
    var idMkVs = charIDToTypeID( "MkVs" );
    desc118.putBoolean( idMkVs, false );
executeAction( idslct, desc118, DialogModes.NO );

// =======================================================
var idsetd = charIDToTypeID( "setd" );
    var desc119 = new ActionDescriptor();
    var idnull = charIDToTypeID( "null" );
        var ref24 = new ActionReference();
        var idTxLr = charIDToTypeID( "TxLr" );
        var idOrdn = charIDToTypeID( "Ordn" );
        var idTrgt = charIDToTypeID( "Trgt" );
        ref24.putEnumerated( idTxLr, idOrdn, idTrgt );
    desc119.putReference( idnull, ref24 );
    var idT = charIDToTypeID( "T   " );
        var desc120 = new ActionDescriptor();
        var idTxt = charIDToTypeID( "Txt " );
        //desc120.putString( idTxt, "Placoger Text" );
        desc120.putString( idTxt, inputString );
        var idwarp = stringIDToTypeID( "warp" );
            var desc121 = new ActionDescriptor();
            var idwarpStyle = stringIDToTypeID( "warpStyle" );
            var idwarpStyle = stringIDToTypeID( "warpStyle" );
            var idwarpNone = stringIDToTypeID( "warpNone" );
            desc121.putEnumerated( idwarpStyle, idwarpStyle, idwarpNone );
            var idwarpValue = stringIDToTypeID( "warpValue" );
            desc121.putDouble( idwarpValue, 0.000000 );
            var idwarpPerspective = stringIDToTypeID( "warpPerspective" );
            desc121.putDouble( idwarpPerspective, 0.000000 );
            var idwarpPerspectiveOther = stringIDToTypeID( "warpPerspectiveOther" );
            desc121.putDouble( idwarpPerspectiveOther, 0.000000 );
            var idwarpRotate = stringIDToTypeID( "warpRotate" );
            var idOrnt = charIDToTypeID( "Ornt" );
            var idHrzn = charIDToTypeID( "Hrzn" );
            desc121.putEnumerated( idwarpRotate, idOrnt, idHrzn );
        var idwarp = stringIDToTypeID( "warp" );
        desc120.putObject( idwarp, idwarp, desc121 );
        var idtextGridding = stringIDToTypeID( "textGridding" );
        var idtextGridding = stringIDToTypeID( "textGridding" );
        var idNone = charIDToTypeID( "None" );
        desc120.putEnumerated( idtextGridding, idtextGridding, idNone );
        var idOrnt = charIDToTypeID( "Ornt" );
        var idOrnt = charIDToTypeID( "Ornt" );
        var idHrzn = charIDToTypeID( "Hrzn" );
        desc120.putEnumerated( idOrnt, idOrnt, idHrzn );
        var idAntA = charIDToTypeID( "AntA" );
        var idAnnt = charIDToTypeID( "Annt" );
        var idantiAliasSharp = stringIDToTypeID( "antiAliasSharp" );
        desc120.putEnumerated( idAntA, idAnnt, idantiAliasSharp );
        var idtextShape = stringIDToTypeID( "textShape" );
            var list11 = new ActionList();
                var desc122 = new ActionDescriptor();
                var idTEXT = charIDToTypeID( "TEXT" );
                var idTEXT = charIDToTypeID( "TEXT" );
                var idbox = stringIDToTypeID( "box" );
                desc122.putEnumerated( idTEXT, idTEXT, idbox );
                var idOrnt = charIDToTypeID( "Ornt" );
                var idOrnt = charIDToTypeID( "Ornt" );
                var idHrzn = charIDToTypeID( "Hrzn" );
                desc122.putEnumerated( idOrnt, idOrnt, idHrzn );
                var idTrnf = charIDToTypeID( "Trnf" );
                    var desc123 = new ActionDescriptor();
                    var idxx = stringIDToTypeID( "xx" );
                    desc123.putDouble( idxx, 1.000000 );
                    var idxy = stringIDToTypeID( "xy" );
                    desc123.putDouble( idxy, 0.000000 );
                    var idyx = stringIDToTypeID( "yx" );
                    desc123.putDouble( idyx, 0.000000 );
                    var idyy = stringIDToTypeID( "yy" );
                    desc123.putDouble( idyy, 1.000000 );
                    var idtx = stringIDToTypeID( "tx" );
                    desc123.putDouble( idtx, 0.000000 );
                    var idty = stringIDToTypeID( "ty" );
                    desc123.putDouble( idty, 0.000000 );
                var idTrnf = charIDToTypeID( "Trnf" );
                desc122.putObject( idTrnf, idTrnf, desc123 );
                var idrowCount = stringIDToTypeID( "rowCount" );
                desc122.putInteger( idrowCount, 1 );
                var idcolumnCount = stringIDToTypeID( "columnCount" );
                desc122.putInteger( idcolumnCount, 1 );
                var idrowMajorOrder = stringIDToTypeID( "rowMajorOrder" );
                desc122.putBoolean( idrowMajorOrder, true );
                var idrowGutter = stringIDToTypeID( "rowGutter" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc122.putUnitDouble( idrowGutter, idPnt, 0.000000 );
                var idcolumnGutter = stringIDToTypeID( "columnGutter" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc122.putUnitDouble( idcolumnGutter, idPnt, 0.000000 );
                var idSpcn = charIDToTypeID( "Spcn" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc122.putUnitDouble( idSpcn, idPnt, 0.000000 );
                var idframeBaselineAlignment = stringIDToTypeID( "frameBaselineAlignment" );
                var idframeBaselineAlignment = stringIDToTypeID( "frameBaselineAlignment" );
                var idalignByAscent = stringIDToTypeID( "alignByAscent" );
                desc122.putEnumerated( idframeBaselineAlignment, idframeBaselineAlignment, idalignByAscent );
                var idfirstBaselineMinimum = stringIDToTypeID( "firstBaselineMinimum" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc122.putUnitDouble( idfirstBaselineMinimum, idPnt, 0.000000 );
                var idbounds = stringIDToTypeID( "bounds" );
                    var desc124 = new ActionDescriptor();
                    var idTop = charIDToTypeID( "Top " );
                    desc124.putDouble( idTop, 0.000000 );
                    var idLeft = charIDToTypeID( "Left" );
                    desc124.putDouble( idLeft, 0.000000 );
                    var idBtom = charIDToTypeID( "Btom" );
                    desc124.putDouble( idBtom, 484.668243 );
                    var idRght = charIDToTypeID( "Rght" );
                    desc124.putDouble( idRght, 1092.033325 );
                var idRctn = charIDToTypeID( "Rctn" );
                desc122.putObject( idbounds, idRctn, desc124 );
            var idtextShape = stringIDToTypeID( "textShape" );
            list11.putObject( idtextShape, desc122 );
        desc120.putList( idtextShape, list11 );

        // =======================================================
        var desc25  = [];
        var desc26  = [];
        var desc27  = [];
        var desc28  = [];
        var desc125 = [];
        var desc126 = [];
        var desc127 = [];
        var desc128 = [];
        var desc129 = [];
        var desc130 = [];
        var desc131 = [];
        var desc132 = [];
        var desc133 = [];
        var desc134 = [];
        var desc135 = [];
        var desc136 = [];

        for(var i=0;i<originIndices.length;i++){
          // Determine if we have a mana symbol for this iteration
          if(symbolsEnd[i]-symbolsStart[i] > 0){
            // Alright fellas we have a symbol
            var rgbValue = rgbB;
            // If white
            if(inputString.slice(symbolsStart[i]+1, symbolsEnd[i]) == "w"){
              rgbValue = rgbW;
            }
            // else if blue
            else if(inputString.slice(symbolsStart[i]+1, symbolsEnd[i]) == "u"){
              rgbValue = rgbU;
            }
            // else if red
            else if(inputString.slice(symbolsStart[i]+1, symbolsEnd[i]) == "r"){
              rgbValue = rgbR;
            }
            // else if green
            else if(inputString.slice(symbolsStart[i]+1, symbolsEnd[i]) == "g"){
              rgbValue = rgbG;
            }
            var selectedFont = "MagicSymbols2008";
            if(inputString.slice(symbolsStart[i], symbolsStart[i]+1) == "O" || inputString.slice(symbolsStart[i]+1, symbolsEnd[i]) == "C"){
              selectedFont = "MTG2016";
            }
          }

        var idTxtt = charIDToTypeID( "Txtt" );
            if(i>0){
              list12.putObject( idTxtt, desc133[i-1] );
            }
            else{
              var list12 = new ActionList();
            }
            //var list12 = new ActionList();
            desc25[desc25.length] = new ActionDescriptor();
            var idFrom = charIDToTypeID( "From" );
            desc25[i].putInteger( idFrom, regularStart[i] );
            var idT = charIDToTypeID( "T   " );
            desc25[i].putInteger( idT, regularEnd[i] );
            var idTxtS = charIDToTypeID( "TxtS" );
                desc26[desc26.length] = new ActionDescriptor();
                var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                desc26[i].putBoolean( idstyleSheetHasParent, true );
                var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                desc26[i].putString( idfontPostScriptName, "MPlantin" );
                var idFntN = charIDToTypeID( "FntN" );
                desc26[i].putString( idFntN, "MPlantin" );
                var idFntS = charIDToTypeID( "FntS" );
                desc26[i].putString( idFntS, "Regular" );
                var idScrp = charIDToTypeID( "Scrp" );
                desc26[i].putInteger( idScrp, 0 );
                var idFntT = charIDToTypeID( "FntT" );
                desc26[i].putInteger( idFntT, 1 );
                var idSz = charIDToTypeID( "Sz  " );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc26[i].putUnitDouble( idSz, idPnt, 64.000000 );
                var idHrzS = charIDToTypeID( "HrzS" );
                desc26[i].putDouble( idHrzS, 100.000000 );
                var idVrtS = charIDToTypeID( "VrtS" );
                desc26[i].putDouble( idVrtS, 100.000000 );
                var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                desc26[i].putBoolean( idsyntheticBold, false );
                var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                desc26[i].putBoolean( idsyntheticItalic, false );
                var idautoLeading = stringIDToTypeID( "autoLeading" );
                desc26[i].putBoolean( idautoLeading, false );
                var idLdng = charIDToTypeID( "Ldng" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc26[i].putUnitDouble( idLdng, idPnt, 64.000000 );
                var idTrck = charIDToTypeID( "Trck" );
                desc26[i].putInteger( idTrck, 0 );
                var idBsln = charIDToTypeID( "Bsln" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc26[i].putUnitDouble( idBsln, idPnt, 0.000000 );
                var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                desc26[i].putDouble( idcharacterRotation, 0.000000 );
                var idAtKr = charIDToTypeID( "AtKr" );
                var idAtKr = charIDToTypeID( "AtKr" );
                var idmetricsKern = stringIDToTypeID( "metricsKern" );
                desc26[i].putEnumerated( idAtKr, idAtKr, idmetricsKern );
                var idfontCaps = stringIDToTypeID( "fontCaps" );
                var idfontCaps = stringIDToTypeID( "fontCaps" );
                var idNrml = charIDToTypeID( "Nrml" );
                desc26[i].putEnumerated( idfontCaps, idfontCaps, idNrml );
                var idbaseline = stringIDToTypeID( "baseline" );
                var idbaseline = stringIDToTypeID( "baseline" );
                var idNrml = charIDToTypeID( "Nrml" );
                desc26[i].putEnumerated( idbaseline, idbaseline, idNrml );
                var idotbaseline = stringIDToTypeID( "otbaseline" );
                var idotbaseline = stringIDToTypeID( "otbaseline" );
                var idNrml = charIDToTypeID( "Nrml" );
                desc26[i].putEnumerated( idotbaseline, idotbaseline, idNrml );
                var idstrikethrough = stringIDToTypeID( "strikethrough" );
                var idstrikethrough = stringIDToTypeID( "strikethrough" );
                var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                desc26[i].putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                var idUndl = charIDToTypeID( "Undl" );
                var idUndl = charIDToTypeID( "Undl" );
                var idunderlineOff = stringIDToTypeID( "underlineOff" );
                desc26[i].putEnumerated( idUndl, idUndl, idunderlineOff );
                var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc26[i].putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                var idligature = stringIDToTypeID( "ligature" );
                desc26[i].putBoolean( idligature, true );
                var idaltligature = stringIDToTypeID( "altligature" );
                desc26[i].putBoolean( idaltligature, false );
                var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                desc26[i].putBoolean( idcontextualLigatures, true );
                var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                desc26[i].putBoolean( idalternateLigatures, false );
                var idoldStyle = stringIDToTypeID( "oldStyle" );
                desc26[i].putBoolean( idoldStyle, false );
                var idfractions = stringIDToTypeID( "fractions" );
                desc26[i].putBoolean( idfractions, false );
                var idordinals = stringIDToTypeID( "ordinals" );
                desc26[i].putBoolean( idordinals, false );
                var idswash = stringIDToTypeID( "swash" );
                desc26[i].putBoolean( idswash, false );
                var idtitling = stringIDToTypeID( "titling" );
                desc26[i].putBoolean( idtitling, false );
                var idconnectionForms = stringIDToTypeID( "connectionForms" );
                desc26[i].putBoolean( idconnectionForms, true );
                var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                desc26[i].putBoolean( idstylisticAlternates, false );
                var idornaments = stringIDToTypeID( "ornaments" );
                desc26[i].putBoolean( idornaments, false );
                var idfigureStyle = stringIDToTypeID( "figureStyle" );
                var idfigureStyle = stringIDToTypeID( "figureStyle" );
                var idNrml = charIDToTypeID( "Nrml" );
                desc26[i].putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                desc26[i].putBoolean( idproportionalMetrics, false );
                var idkana = stringIDToTypeID( "kana" );
                desc26[i].putBoolean( idkana, false );
                var iditalics = stringIDToTypeID( "italics" );
                desc26[i].putBoolean( iditalics, false );
                var idruby = stringIDToTypeID( "ruby" );
                desc26[i].putBoolean( idruby, false );
                var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                var idwithStream = stringIDToTypeID( "withStream" );
                desc26[i].putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
                var idtextLanguage = stringIDToTypeID( "textLanguage" );
                var idtextLanguage = stringIDToTypeID( "textLanguage" );
                var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                desc26[i].putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                var iddefaultForm = stringIDToTypeID( "defaultForm" );
                desc26[i].putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
                var idmojiZume = stringIDToTypeID( "mojiZume" );
                desc26[i].putDouble( idmojiZume, 0.000000 );
                var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                var idroman = stringIDToTypeID( "roman" );
                desc26[i].putEnumerated( idgridAlignment, idgridAlignment, idroman );
                var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                desc26[i].putBoolean( idenableWariChu, false );
                var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                desc26[i].putInteger( idwariChuCount, 2 );
                var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                desc26[i].putInteger( idwariChuLineGap, 0 );
                var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                desc26[i].putDouble( idwariChuScale, 0.500000 );
                var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                desc26[i].putInteger( idwariChuWidow, 2 );
                var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                desc26[i].putInteger( idwariChuOrphan, 2 );
                var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                desc26[i].putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                desc26[i].putInteger( idtcyUpDown, 0 );
                var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                desc26[i].putInteger( idtcyLeftRight, 0 );
                var idleftAki = stringIDToTypeID( "leftAki" );
                desc26[i].putDouble( idleftAki, -1.000000 );
                var idrightAki = stringIDToTypeID( "rightAki" );
                desc26[i].putDouble( idrightAki, -1.000000 );
                var idjiDori = stringIDToTypeID( "jiDori" );
                desc26[i].putInteger( idjiDori, 0 );
                var idnoBreak = stringIDToTypeID( "noBreak" );
                desc26[i].putBoolean( idnoBreak, false );
                var idClr = charIDToTypeID( "Clr " );
                    desc27[desc27.length] = new ActionDescriptor();
                    var idRd = charIDToTypeID( "Rd  " );
                    desc27[i].putDouble( idRd, 0 );
                    var idGrn = charIDToTypeID( "Grn " );
                    desc27[i].putDouble( idGrn, 0 );
                    var idBl = charIDToTypeID( "Bl  " );
                    desc27[i].putDouble( idBl, 0 );
                var idRGBC = charIDToTypeID( "RGBC" );
                desc26[i].putObject( idClr, idRGBC, desc27[i] );
                var idstrokeColor = stringIDToTypeID( "strokeColor" );
                    desc28[desc28.length] = new ActionDescriptor();
                    var idRd = charIDToTypeID( "Rd  " );
                    desc28[i].putDouble( idRd, 0.000000 );
                    var idGrn = charIDToTypeID( "Grn " );
                    desc28[i].putDouble( idGrn, 0.000000 );
                    var idBl = charIDToTypeID( "Bl  " );
                    desc28[i].putDouble( idBl, 0.000000 );
                var idRGBC = charIDToTypeID( "RGBC" );
                desc26[i].putObject( idstrokeColor, idRGBC, desc28[i] );
                var idFl = charIDToTypeID( "Fl  " );
                desc26[i].putBoolean( idFl, true );
                var idStrk = charIDToTypeID( "Strk" );
                desc26[i].putBoolean( idStrk, false );
                var idfillFirst = stringIDToTypeID( "fillFirst" );
                desc26[i].putBoolean( idfillFirst, false );
                var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                desc26[i].putBoolean( idfillOverPrint, false );
                var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                desc26[i].putBoolean( idstrokeOverPrint, false );
                var idlineCap = stringIDToTypeID( "lineCap" );
                var idlineCap = stringIDToTypeID( "lineCap" );
                var idbuttCap = stringIDToTypeID( "buttCap" );
                desc26[i].putEnumerated( idlineCap, idlineCap, idbuttCap );
                var idlineJoin = stringIDToTypeID( "lineJoin" );
                var idlineJoin = stringIDToTypeID( "lineJoin" );
                var idmiterJoin = stringIDToTypeID( "miterJoin" );
                desc26[i].putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                var idlineWidth = stringIDToTypeID( "lineWidth" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc26[i].putUnitDouble( idlineWidth, idPnt, 0.009999 );
                var idmiterLimit = stringIDToTypeID( "miterLimit" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc26[i].putUnitDouble( idmiterLimit, idPnt, 0.009999 );
                var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                desc26[i].putDouble( idlineDashoffset, 0.000000 );
            var idTxtS = charIDToTypeID( "TxtS" );
            desc25[i].putObject( idTxtS, idTxtS, desc26[i] );

        // Italics text
        var idTxtt = charIDToTypeID( "Txtt" );
        list12.putObject( idTxtt, desc25[i] );
            desc125[desc125.length] = new ActionDescriptor();
            var idFrom = charIDToTypeID( "From" );
            desc125[i].putInteger( idFrom, italicsStart[i] );
            //alert(italicsStart[i]);
            var idT = charIDToTypeID( "T   " );
            //alert(italicsEnd[i]);
            desc125[i].putInteger( idT, italicsEnd[i] );
            var idTxtS = charIDToTypeID( "TxtS" );
                desc126[desc126.length] = new ActionDescriptor();
                var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                desc126[i].putBoolean( idstyleSheetHasParent, true );
                var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                desc126[i].putString( idfontPostScriptName, "MPlantin-Italic" );
                var idFntN = charIDToTypeID( "FntN" );
                desc126[i].putString( idFntN, "MPlantin-Italic" );
                var idFntS = charIDToTypeID( "FntS" );
                desc126[i].putString( idFntS, "Regular" );
                var idScrp = charIDToTypeID( "Scrp" );
                desc126[i].putInteger( idScrp, 0 );
                var idFntT = charIDToTypeID( "FntT" );
                desc126[i].putInteger( idFntT, 1 );
                var idSz = charIDToTypeID( "Sz  " );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc126[i].putUnitDouble( idSz, idPnt, 64.000000 );
                var idHrzS = charIDToTypeID( "HrzS" );
                desc126[i].putDouble( idHrzS, 100.000000 );
                var idVrtS = charIDToTypeID( "VrtS" );
                desc126[i].putDouble( idVrtS, 100.000000 );
                var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                desc126[i].putBoolean( idsyntheticBold, false );
                var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                desc126[i].putBoolean( idsyntheticItalic, false );
                var idautoLeading = stringIDToTypeID( "autoLeading" );
                desc126[i].putBoolean( idautoLeading, false );
                var idLdng = charIDToTypeID( "Ldng" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc126[i].putUnitDouble( idLdng, idPnt, 64.000000 );
                var idTrck = charIDToTypeID( "Trck" );
                desc126[i].putInteger( idTrck, 0 );
                var idBsln = charIDToTypeID( "Bsln" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc126[i].putUnitDouble( idBsln, idPnt, 0.000000 );
                var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                desc126[i].putDouble( idcharacterRotation, 0.000000 );
                var idAtKr = charIDToTypeID( "AtKr" );
                var idAtKr = charIDToTypeID( "AtKr" );
                var idmetricsKern = stringIDToTypeID( "metricsKern" );
                desc126[i].putEnumerated( idAtKr, idAtKr, idmetricsKern );
                var idfontCaps = stringIDToTypeID( "fontCaps" );
                var idfontCaps = stringIDToTypeID( "fontCaps" );
                var idNrml = charIDToTypeID( "Nrml" );
                desc126[i].putEnumerated( idfontCaps, idfontCaps, idNrml );
                var idbaseline = stringIDToTypeID( "baseline" );
                var idbaseline = stringIDToTypeID( "baseline" );
                var idNrml = charIDToTypeID( "Nrml" );
                desc126[i].putEnumerated( idbaseline, idbaseline, idNrml );
                var idotbaseline = stringIDToTypeID( "otbaseline" );
                var idotbaseline = stringIDToTypeID( "otbaseline" );
                var idNrml = charIDToTypeID( "Nrml" );
                desc126[i].putEnumerated( idotbaseline, idotbaseline, idNrml );
                var idstrikethrough = stringIDToTypeID( "strikethrough" );
                var idstrikethrough = stringIDToTypeID( "strikethrough" );
                var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                desc126[i].putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                var idUndl = charIDToTypeID( "Undl" );
                var idUndl = charIDToTypeID( "Undl" );
                var idunderlineOff = stringIDToTypeID( "underlineOff" );
                desc126[i].putEnumerated( idUndl, idUndl, idunderlineOff );
                var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc126[i].putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                var idligature = stringIDToTypeID( "ligature" );
                desc126[i].putBoolean( idligature, true );
                var idaltligature = stringIDToTypeID( "altligature" );
                desc126[i].putBoolean( idaltligature, false );
                var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                desc126[i].putBoolean( idcontextualLigatures, true );
                var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                desc126[i].putBoolean( idalternateLigatures, false );
                var idoldStyle = stringIDToTypeID( "oldStyle" );
                desc126[i].putBoolean( idoldStyle, false );
                var idfractions = stringIDToTypeID( "fractions" );
                desc126[i].putBoolean( idfractions, false );
                var idordinals = stringIDToTypeID( "ordinals" );
                desc126[i].putBoolean( idordinals, false );
                var idswash = stringIDToTypeID( "swash" );
                desc126[i].putBoolean( idswash, false );
                var idtitling = stringIDToTypeID( "titling" );
                desc126[i].putBoolean( idtitling, false );
                var idconnectionForms = stringIDToTypeID( "connectionForms" );
                desc126[i].putBoolean( idconnectionForms, true );
                var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                desc126[i].putBoolean( idstylisticAlternates, false );
                var idornaments = stringIDToTypeID( "ornaments" );
                desc126[i].putBoolean( idornaments, false );
                var idfigureStyle = stringIDToTypeID( "figureStyle" );
                var idfigureStyle = stringIDToTypeID( "figureStyle" );
                var idNrml = charIDToTypeID( "Nrml" );
                desc126[i].putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                desc126[i].putBoolean( idproportionalMetrics, false );
                var idkana = stringIDToTypeID( "kana" );
                desc126[i].putBoolean( idkana, false );
                var iditalics = stringIDToTypeID( "italics" );
                desc126[i].putBoolean( iditalics, false );
                var idruby = stringIDToTypeID( "ruby" );
                desc126[i].putBoolean( idruby, false );
                var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                var idwithStream = stringIDToTypeID( "withStream" );
                desc126[i].putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
                var idtextLanguage = stringIDToTypeID( "textLanguage" );
                var idtextLanguage = stringIDToTypeID( "textLanguage" );
                var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                desc126[i].putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                var iddefaultForm = stringIDToTypeID( "defaultForm" );
                desc126[i].putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
                var idmojiZume = stringIDToTypeID( "mojiZume" );
                desc126[i].putDouble( idmojiZume, 0.000000 );
                var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                var idroman = stringIDToTypeID( "roman" );
                desc126[i].putEnumerated( idgridAlignment, idgridAlignment, idroman );
                var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                desc126[i].putBoolean( idenableWariChu, false );
                var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                desc126[i].putInteger( idwariChuCount, 2 );
                var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                desc126[i].putInteger( idwariChuLineGap, 0 );
                var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                desc126[i].putDouble( idwariChuScale, 0.500000 );
                var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                desc126[i].putInteger( idwariChuWidow, 2 );
                var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                desc126[i].putInteger( idwariChuOrphan, 2 );
                var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                desc126[i].putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                desc126[i].putInteger( idtcyUpDown, 0 );
                var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                desc126[i].putInteger( idtcyLeftRight, 0 );
                var idleftAki = stringIDToTypeID( "leftAki" );
                desc126[i].putDouble( idleftAki, -1.000000 );
                var idrightAki = stringIDToTypeID( "rightAki" );
                desc126[i].putDouble( idrightAki, -1.000000 );
                var idjiDori = stringIDToTypeID( "jiDori" );
                desc126[i].putInteger( idjiDori, 0 );
                var idnoBreak = stringIDToTypeID( "noBreak" );
                desc126[i].putBoolean( idnoBreak, false );
                var idClr = charIDToTypeID( "Clr " );
                    desc127[desc127.length] = new ActionDescriptor();
                    var idRd = charIDToTypeID( "Rd  " );
                    desc127[i].putDouble( idRd, 0 );
                    var idGrn = charIDToTypeID( "Grn " );
                    desc127[i].putDouble( idGrn, 0 );
                    var idBl = charIDToTypeID( "Bl  " );
                    desc127[i].putDouble( idBl, 0 );
                var idRGBC = charIDToTypeID( "RGBC" );
                desc126[i].putObject( idClr, idRGBC, desc127[i] );
                var idstrokeColor = stringIDToTypeID( "strokeColor" );
                    desc128[desc128.length] = new ActionDescriptor();
                    var idRd = charIDToTypeID( "Rd  " );
                    desc128[i].putDouble( idRd, 0.000000 );
                    var idGrn = charIDToTypeID( "Grn " );
                    desc128[i].putDouble( idGrn, 0.000000 );
                    var idBl = charIDToTypeID( "Bl  " );
                    desc128[i].putDouble( idBl, 0.000000 );
                var idRGBC = charIDToTypeID( "RGBC" );
                desc126[i].putObject( idstrokeColor, idRGBC, desc128[i] );
                var idFl = charIDToTypeID( "Fl  " );
                desc126[i].putBoolean( idFl, true );
                var idStrk = charIDToTypeID( "Strk" );
                desc126[i].putBoolean( idStrk, false );
                var idfillFirst = stringIDToTypeID( "fillFirst" );
                desc126[i].putBoolean( idfillFirst, false );
                var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                desc126[i].putBoolean( idfillOverPrint, false );
                var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                desc126[i].putBoolean( idstrokeOverPrint, false );
                var idlineCap = stringIDToTypeID( "lineCap" );
                var idlineCap = stringIDToTypeID( "lineCap" );
                var idbuttCap = stringIDToTypeID( "buttCap" );
                desc126[i].putEnumerated( idlineCap, idlineCap, idbuttCap );
                var idlineJoin = stringIDToTypeID( "lineJoin" );
                var idlineJoin = stringIDToTypeID( "lineJoin" );
                var idmiterJoin = stringIDToTypeID( "miterJoin" );
                desc126[i].putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                var idlineWidth = stringIDToTypeID( "lineWidth" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc126[i].putUnitDouble( idlineWidth, idPnt, 0.009999 );
                var idmiterLimit = stringIDToTypeID( "miterLimit" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc126[i].putUnitDouble( idmiterLimit, idPnt, 0.009999 );
                var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                desc126[i].putDouble( idlineDashoffset, 0.000000 );
            var idTxtS = charIDToTypeID( "TxtS" );
            desc125[i].putObject( idTxtS, idTxtS, desc126[i] );

        // =======================================================
        var idTxtt = charIDToTypeID( "Txtt" );
            list12.putObject( idTxtt, desc125[i] );
                desc129[desc129.length] = new ActionDescriptor();
                var idFrom = charIDToTypeID( "From" );
                desc129[i].putInteger( idFrom, symbolsStart[i] );
                var idT = charIDToTypeID( "T   " );
                desc129[i].putInteger( idT, symbolsStart[i]+1 );
                var idTxtS = charIDToTypeID( "TxtS" );
                    desc130[desc130.length] = new ActionDescriptor();
                    var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                    desc130[i].putBoolean( idstyleSheetHasParent, true );
                    var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                    desc130[i].putString( idfontPostScriptName, selectedFont );
                    var idFntN = charIDToTypeID( "FntN" );
                    desc130[i].putString( idFntN, selectedFont );
                    var idFntS = charIDToTypeID( "FntS" );
                    desc130[i].putString( idFntS, "Regular" );
                    var idScrp = charIDToTypeID( "Scrp" );
                    desc130[i].putInteger( idScrp, 0 );
                    var idFntT = charIDToTypeID( "FntT" );
                    desc130[i].putInteger( idFntT, 1 );
                    var idSz = charIDToTypeID( "Sz  " );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc130[i].putUnitDouble( idSz, idPnt, 64.000000 );
                    var idHrzS = charIDToTypeID( "HrzS" );
                    desc130[i].putDouble( idHrzS, 100.000000 );
                    var idVrtS = charIDToTypeID( "VrtS" );
                    desc130[i].putDouble( idVrtS, 100.000000 );
                    var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                    desc130[i].putBoolean( idsyntheticBold, false );
                    var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                    desc130[i].putBoolean( idsyntheticItalic, false );
                    var idautoLeading = stringIDToTypeID( "autoLeading" );
                    desc130[i].putBoolean( idautoLeading, false );
                    var idTrck = charIDToTypeID( "Trck" );
                    desc130[i].putInteger( idTrck, 0 );
                    var idBsln = charIDToTypeID( "Bsln" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc130[i].putUnitDouble( idBsln, idPnt, 0.000000 );
                    var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                    desc130[i].putDouble( idcharacterRotation, 0.000000 );
                    var idAtKr = charIDToTypeID( "AtKr" );
                    var idAtKr = charIDToTypeID( "AtKr" );
                    var idmetricsKern = stringIDToTypeID( "metricsKern" );
                    desc130[i].putEnumerated( idAtKr, idAtKr, idmetricsKern );
                    var idfontCaps = stringIDToTypeID( "fontCaps" );
                    var idfontCaps = stringIDToTypeID( "fontCaps" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc130[i].putEnumerated( idfontCaps, idfontCaps, idNrml );
                    var idbaseline = stringIDToTypeID( "baseline" );
                    var idbaseline = stringIDToTypeID( "baseline" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc130[i].putEnumerated( idbaseline, idbaseline, idNrml );
                    var idotbaseline = stringIDToTypeID( "otbaseline" );
                    var idotbaseline = stringIDToTypeID( "otbaseline" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc130[i].putEnumerated( idotbaseline, idotbaseline, idNrml );
                    var idstrikethrough = stringIDToTypeID( "strikethrough" );
                    var idstrikethrough = stringIDToTypeID( "strikethrough" );
                    var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                    desc130[i].putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                    var idUndl = charIDToTypeID( "Undl" );
                    var idUndl = charIDToTypeID( "Undl" );
                    var idunderlineOff = stringIDToTypeID( "underlineOff" );
                    desc130[i].putEnumerated( idUndl, idUndl, idunderlineOff );
                    var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc130[i].putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                    var idligature = stringIDToTypeID( "ligature" );
                    desc130[i].putBoolean( idligature, true );
                    var idaltligature = stringIDToTypeID( "altligature" );
                    desc130[i].putBoolean( idaltligature, false );
                    var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                    desc130[i].putBoolean( idcontextualLigatures, true );
                    var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                    desc130[i].putBoolean( idalternateLigatures, false );
                    var idoldStyle = stringIDToTypeID( "oldStyle" );
                    desc130[i].putBoolean( idoldStyle, false );
                    var idfractions = stringIDToTypeID( "fractions" );
                    desc130[i].putBoolean( idfractions, false );
                    var idordinals = stringIDToTypeID( "ordinals" );
                    desc130[i].putBoolean( idordinals, false );
                    var idswash = stringIDToTypeID( "swash" );
                    desc130[i].putBoolean( idswash, false );
                    var idtitling = stringIDToTypeID( "titling" );
                    desc130[i].putBoolean( idtitling, false );
                    var idconnectionForms = stringIDToTypeID( "connectionForms" );
                    desc130[i].putBoolean( idconnectionForms, true );
                    var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                    desc130[i].putBoolean( idstylisticAlternates, false );
                    var idornaments = stringIDToTypeID( "ornaments" );
                    desc130[i].putBoolean( idornaments, false );
                    var idfigureStyle = stringIDToTypeID( "figureStyle" );
                    var idfigureStyle = stringIDToTypeID( "figureStyle" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc130[i].putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                    var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                    desc130[i].putBoolean( idproportionalMetrics, false );
                    var idkana = stringIDToTypeID( "kana" );
                    desc130[i].putBoolean( idkana, false );
                    var iditalics = stringIDToTypeID( "italics" );
                    desc130[i].putBoolean( iditalics, false );
                    var idruby = stringIDToTypeID( "ruby" );
                    desc130[i].putBoolean( idruby, false );
                    var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                    var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                    var idwithStream = stringIDToTypeID( "withStream" );
                    desc130[i].putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                    desc130[i].putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                    var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                    var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                    var iddefaultForm = stringIDToTypeID( "defaultForm" );
                    desc130[i].putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
                    var idmojiZume = stringIDToTypeID( "mojiZume" );
                    desc130[i].putDouble( idmojiZume, 0.000000 );
                    var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                    var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                    var idroman = stringIDToTypeID( "roman" );
                    desc130[i].putEnumerated( idgridAlignment, idgridAlignment, idroman );
                    var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                    desc130[i].putBoolean( idenableWariChu, false );
                    var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                    desc130[i].putInteger( idwariChuCount, 2 );
                    var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                    desc130[i].putInteger( idwariChuLineGap, 0 );
                    var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                    desc130[i].putDouble( idwariChuScale, 0.500000 );
                    var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                    desc130[i].putInteger( idwariChuWidow, 2 );
                    var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                    desc130[i].putInteger( idwariChuOrphan, 2 );
                    var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                    var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                    var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                    desc130[i].putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                    var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                    desc130[i].putInteger( idtcyUpDown, 0 );
                    var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                    desc130[i].putInteger( idtcyLeftRight, 0 );
                    var idleftAki = stringIDToTypeID( "leftAki" );
                    desc130[i].putDouble( idleftAki, -1.000000 );
                    var idrightAki = stringIDToTypeID( "rightAki" );
                    desc130[i].putDouble( idrightAki, -1.000000 );
                    var idjiDori = stringIDToTypeID( "jiDori" );
                    desc130[i].putInteger( idjiDori, 0 );
                    var idnoBreak = stringIDToTypeID( "noBreak" );
                    desc130[i].putBoolean( idnoBreak, false );
                    var idClr = charIDToTypeID( "Clr " );
                        desc131[desc131.length] = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc131[i].putDouble( idRd, rgbValue[0] );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc131[i].putDouble( idGrn, rgbValue[1] );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc131[i].putDouble( idBl, rgbValue[2] );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc130[i].putObject( idClr, idRGBC, desc131[i] );
                    var idstrokeColor = stringIDToTypeID( "strokeColor" );
                        desc132[desc132.length] = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc132[i].putDouble( idRd, 0.000000 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc132[i].putDouble( idGrn, 0.000000 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc132[i].putDouble( idBl, 0.000000 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc130[i].putObject( idstrokeColor, idRGBC, desc132[i] );
                    var idFl = charIDToTypeID( "Fl  " );
                    desc130[i].putBoolean( idFl, true );
                    var idStrk = charIDToTypeID( "Strk" );
                    desc130[i].putBoolean( idStrk, false );
                    var idfillFirst = stringIDToTypeID( "fillFirst" );
                    desc130[i].putBoolean( idfillFirst, false );
                    var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                    desc130[i].putBoolean( idfillOverPrint, false );
                    var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                    desc130[i].putBoolean( idstrokeOverPrint, false );
                    var idlineCap = stringIDToTypeID( "lineCap" );
                    var idlineCap = stringIDToTypeID( "lineCap" );
                    var idbuttCap = stringIDToTypeID( "buttCap" );
                    desc130[i].putEnumerated( idlineCap, idlineCap, idbuttCap );
                    var idlineJoin = stringIDToTypeID( "lineJoin" );
                    var idlineJoin = stringIDToTypeID( "lineJoin" );
                    var idmiterJoin = stringIDToTypeID( "miterJoin" );
                    desc130[i].putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                    var idlineWidth = stringIDToTypeID( "lineWidth" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc130[i].putUnitDouble( idlineWidth, idPnt, 0.009999 );
                    var idmiterLimit = stringIDToTypeID( "miterLimit" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc130[i].putUnitDouble( idmiterLimit, idPnt, 0.009999 );
                    var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                    desc130[i].putDouble( idlineDashoffset, 0.000000 );
                var idTxtS = charIDToTypeID( "TxtS" );
                desc129[i].putObject( idTxtS, idTxtS, desc130[i] );

            // =======================================================
            var idTxtt = charIDToTypeID( "Txtt" );
            list12.putObject( idTxtt, desc129[i] );
                desc133[desc133.length] = new ActionDescriptor();
                var idFrom = charIDToTypeID( "From" );
                desc133[i].putInteger( idFrom, symbolsStart[i]+1 );
                var idT = charIDToTypeID( "T   " );
                desc133[i].putInteger( idT, symbolsEnd[i] );
                var idTxtS = charIDToTypeID( "TxtS" );
                    desc134[desc134.length] = new ActionDescriptor();
                    var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                    desc134[i].putBoolean( idstyleSheetHasParent, true );
                    var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                    desc134[i].putString( idfontPostScriptName, selectedFont );
                    var idFntN = charIDToTypeID( "FntN" );
                    desc134[i].putString( idFntN, selectedFont );
                    var idFntS = charIDToTypeID( "FntS" );
                    desc134[i].putString( idFntS, "Regular" );
                    var idScrp = charIDToTypeID( "Scrp" );
                    desc134[i].putInteger( idScrp, 0 );
                    var idFntT = charIDToTypeID( "FntT" );
                    desc134[i].putInteger( idFntT, 1 );
                    var idSz = charIDToTypeID( "Sz  " );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc134[i].putUnitDouble( idSz, idPnt, 64.000000 );
                    var idHrzS = charIDToTypeID( "HrzS" );
                    desc134[i].putDouble( idHrzS, 100.000000 );
                    var idVrtS = charIDToTypeID( "VrtS" );
                    desc134[i].putDouble( idVrtS, 100.000000 );
                    var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                    desc134[i].putBoolean( idsyntheticBold, false );
                    var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                    desc134[i].putBoolean( idsyntheticItalic, false );
                    var idautoLeading = stringIDToTypeID( "autoLeading" );
                    desc134[i].putBoolean( idautoLeading, false );
                    var idTrck = charIDToTypeID( "Trck" );
                    desc134[i].putInteger( idTrck, 0 );
                    var idBsln = charIDToTypeID( "Bsln" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc134[i].putUnitDouble( idBsln, idPnt, 0.000000 );
                    var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                    desc134[i].putDouble( idcharacterRotation, 0.000000 );
                    var idAtKr = charIDToTypeID( "AtKr" );
                    var idAtKr = charIDToTypeID( "AtKr" );
                    var idmetricsKern = stringIDToTypeID( "metricsKern" );
                    desc134[i].putEnumerated( idAtKr, idAtKr, idmetricsKern );
                    var idfontCaps = stringIDToTypeID( "fontCaps" );
                    var idfontCaps = stringIDToTypeID( "fontCaps" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc134[i].putEnumerated( idfontCaps, idfontCaps, idNrml );
                    var idbaseline = stringIDToTypeID( "baseline" );
                    var idbaseline = stringIDToTypeID( "baseline" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc134[i].putEnumerated( idbaseline, idbaseline, idNrml );
                    var idotbaseline = stringIDToTypeID( "otbaseline" );
                    var idotbaseline = stringIDToTypeID( "otbaseline" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc134[i].putEnumerated( idotbaseline, idotbaseline, idNrml );
                    var idstrikethrough = stringIDToTypeID( "strikethrough" );
                    var idstrikethrough = stringIDToTypeID( "strikethrough" );
                    var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                    desc134[i].putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                    var idUndl = charIDToTypeID( "Undl" );
                    var idUndl = charIDToTypeID( "Undl" );
                    var idunderlineOff = stringIDToTypeID( "underlineOff" );
                    desc134[i].putEnumerated( idUndl, idUndl, idunderlineOff );
                    var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc134[i].putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                    var idligature = stringIDToTypeID( "ligature" );
                    desc134[i].putBoolean( idligature, true );
                    var idaltligature = stringIDToTypeID( "altligature" );
                    desc134[i].putBoolean( idaltligature, false );
                    var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                    desc134[i].putBoolean( idcontextualLigatures, true );
                    var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                    desc134[i].putBoolean( idalternateLigatures, false );
                    var idoldStyle = stringIDToTypeID( "oldStyle" );
                    desc134[i].putBoolean( idoldStyle, false );
                    var idfractions = stringIDToTypeID( "fractions" );
                    desc134[i].putBoolean( idfractions, false );
                    var idordinals = stringIDToTypeID( "ordinals" );
                    desc134[i].putBoolean( idordinals, false );
                    var idswash = stringIDToTypeID( "swash" );
                    desc134[i].putBoolean( idswash, false );
                    var idtitling = stringIDToTypeID( "titling" );
                    desc134[i].putBoolean( idtitling, false );
                    var idconnectionForms = stringIDToTypeID( "connectionForms" );
                    desc134[i].putBoolean( idconnectionForms, true );
                    var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                    desc134[i].putBoolean( idstylisticAlternates, false );
                    var idornaments = stringIDToTypeID( "ornaments" );
                    desc134[i].putBoolean( idornaments, false );
                    var idfigureStyle = stringIDToTypeID( "figureStyle" );
                    var idfigureStyle = stringIDToTypeID( "figureStyle" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc134[i].putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                    var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                    desc134[i].putBoolean( idproportionalMetrics, false );
                    var idkana = stringIDToTypeID( "kana" );
                    desc134[i].putBoolean( idkana, false );
                    var iditalics = stringIDToTypeID( "italics" );
                    desc134[i].putBoolean( iditalics, false );
                    var idruby = stringIDToTypeID( "ruby" );
                    desc134[i].putBoolean( idruby, false );
                    var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                    var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                    var idwithStream = stringIDToTypeID( "withStream" );
                    desc134[i].putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                    desc134[i].putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                    var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                    var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                    var iddefaultForm = stringIDToTypeID( "defaultForm" );
                    desc134[i].putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
                    var idmojiZume = stringIDToTypeID( "mojiZume" );
                    desc134[i].putDouble( idmojiZume, 0.000000 );
                    var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                    var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                    var idroman = stringIDToTypeID( "roman" );
                    desc134[i].putEnumerated( idgridAlignment, idgridAlignment, idroman );
                    var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                    desc134[i].putBoolean( idenableWariChu, false );
                    var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                    desc134[i].putInteger( idwariChuCount, 2 );
                    var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                    desc134[i].putInteger( idwariChuLineGap, 0 );
                    var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                    desc134[i].putDouble( idwariChuScale, 0.500000 );
                    var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                    desc134[i].putInteger( idwariChuWidow, 2 );
                    var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                    desc134[i].putInteger( idwariChuOrphan, 2 );
                    var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                    var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                    var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                    desc134[i].putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                    var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                    desc134[i].putInteger( idtcyUpDown, 0 );
                    var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                    desc134[i].putInteger( idtcyLeftRight, 0 );
                    var idleftAki = stringIDToTypeID( "leftAki" );
                    desc134[i].putDouble( idleftAki, -1.000000 );
                    var idrightAki = stringIDToTypeID( "rightAki" );
                    desc134[i].putDouble( idrightAki, -1.000000 );
                    var idjiDori = stringIDToTypeID( "jiDori" );
                    desc134[i].putInteger( idjiDori, 0 );
                    var idnoBreak = stringIDToTypeID( "noBreak" );
                    desc134[i].putBoolean( idnoBreak, false );
                    var idClr = charIDToTypeID( "Clr " );
                        desc135[desc135.length] = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc135[i].putDouble( idRd, 0.000000 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc135[i].putDouble( idGrn, 0.000000 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc135[i].putDouble( idBl, 0.000000 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc134[i].putObject( idClr, idRGBC, desc135[i] );
                    var idstrokeColor = stringIDToTypeID( "strokeColor" );
                        desc136[desc136.length] = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc136[i].putDouble( idRd, 0.000000 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc136[i].putDouble( idGrn, 0.000000 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc136[i].putDouble( idBl, 0.000000 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc134[i].putObject( idstrokeColor, idRGBC, desc136[i] );
                    var idFl = charIDToTypeID( "Fl  " );
                    desc134[i].putBoolean( idFl, true );
                    var idStrk = charIDToTypeID( "Strk" );
                    desc134[i].putBoolean( idStrk, false );
                    var idfillFirst = stringIDToTypeID( "fillFirst" );
                    desc134[i].putBoolean( idfillFirst, false );
                    var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                    desc134[i].putBoolean( idfillOverPrint, false );
                    var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                    desc134[i].putBoolean( idstrokeOverPrint, false );
                    var idlineCap = stringIDToTypeID( "lineCap" );
                    var idlineCap = stringIDToTypeID( "lineCap" );
                    var idbuttCap = stringIDToTypeID( "buttCap" );
                    desc134[i].putEnumerated( idlineCap, idlineCap, idbuttCap );
                    var idlineJoin = stringIDToTypeID( "lineJoin" );
                    var idlineJoin = stringIDToTypeID( "lineJoin" );
                    var idmiterJoin = stringIDToTypeID( "miterJoin" );
                    desc134[i].putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                    var idlineWidth = stringIDToTypeID( "lineWidth" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc134[i].putUnitDouble( idlineWidth, idPnt, 0.009999 );
                    var idmiterLimit = stringIDToTypeID( "miterLimit" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc134[i].putUnitDouble( idmiterLimit, idPnt, 0.009999 );
                    var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                    desc134[i].putDouble( idlineDashoffset, 0.000000 );
                var idTxtS = charIDToTypeID( "TxtS" );
                desc133[i].putObject( idTxtS, idTxtS, desc134[i] );
            }

            var idTxtt = charIDToTypeID( "Txtt" );
            list12.putObject( idTxtt, desc133[desc133.length - 1] );
                var desc137 = new ActionDescriptor();
                var idFrom = charIDToTypeID( "From" );
                //desc137.putInteger( idFrom, symbolIndices[symbolIndices.length-1]+2 );
                desc137.putInteger( idFrom, inputString.length );
                var idT = charIDToTypeID( "T   " );
                desc137.putInteger( idT, inputString.length );
                var idTxtS = charIDToTypeID( "TxtS" );
                    var desc138 = new ActionDescriptor();
                    var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                    desc138.putBoolean( idstyleSheetHasParent, true );
                    var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                    desc138.putString( idfontPostScriptName, "MPlantin" );
                    var idFntN = charIDToTypeID( "FntN" );
                    desc138.putString( idFntN, "MPlantin" );
                    var idFntS = charIDToTypeID( "FntS" );
                    desc138.putString( idFntS, "Regular" );
                    var idScrp = charIDToTypeID( "Scrp" );
                    desc138.putInteger( idScrp, 0 );
                    var idFntT = charIDToTypeID( "FntT" );
                    desc138.putInteger( idFntT, 1 );
                    var idSz = charIDToTypeID( "Sz  " );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc138.putUnitDouble( idSz, idPnt, 64.000000 );
                    var idHrzS = charIDToTypeID( "HrzS" );
                    desc138.putDouble( idHrzS, 100.000000 );
                    var idVrtS = charIDToTypeID( "VrtS" );
                    desc138.putDouble( idVrtS, 100.000000 );
                    var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                    desc138.putBoolean( idsyntheticBold, false );
                    var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                    desc138.putBoolean( idsyntheticItalic, false );
                    var idautoLeading = stringIDToTypeID( "autoLeading" );
                    desc138.putBoolean( idautoLeading, false );
                    var idLdng = charIDToTypeID( "Ldng" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc138.putUnitDouble( idLdng, idPnt, 64.000000 );
                    var idTrck = charIDToTypeID( "Trck" );
                    desc138.putInteger( idTrck, 0 );
                    var idBsln = charIDToTypeID( "Bsln" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc138.putUnitDouble( idBsln, idPnt, 0.000000 );
                    var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                    desc138.putDouble( idcharacterRotation, 0.000000 );
                    var idAtKr = charIDToTypeID( "AtKr" );
                    var idAtKr = charIDToTypeID( "AtKr" );
                    var idmetricsKern = stringIDToTypeID( "metricsKern" );
                    desc138.putEnumerated( idAtKr, idAtKr, idmetricsKern );
                    var idfontCaps = stringIDToTypeID( "fontCaps" );
                    var idfontCaps = stringIDToTypeID( "fontCaps" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc138.putEnumerated( idfontCaps, idfontCaps, idNrml );
                    var idbaseline = stringIDToTypeID( "baseline" );
                    var idbaseline = stringIDToTypeID( "baseline" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc138.putEnumerated( idbaseline, idbaseline, idNrml );
                    var idotbaseline = stringIDToTypeID( "otbaseline" );
                    var idotbaseline = stringIDToTypeID( "otbaseline" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc138.putEnumerated( idotbaseline, idotbaseline, idNrml );
                    var idstrikethrough = stringIDToTypeID( "strikethrough" );
                    var idstrikethrough = stringIDToTypeID( "strikethrough" );
                    var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                    desc138.putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                    var idUndl = charIDToTypeID( "Undl" );
                    var idUndl = charIDToTypeID( "Undl" );
                    var idunderlineOff = stringIDToTypeID( "underlineOff" );
                    desc138.putEnumerated( idUndl, idUndl, idunderlineOff );
                    var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc138.putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                    var idligature = stringIDToTypeID( "ligature" );
                    desc138.putBoolean( idligature, true );
                    var idaltligature = stringIDToTypeID( "altligature" );
                    desc138.putBoolean( idaltligature, false );
                    var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                    desc138.putBoolean( idcontextualLigatures, true );
                    var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                    desc138.putBoolean( idalternateLigatures, false );
                    var idoldStyle = stringIDToTypeID( "oldStyle" );
                    desc138.putBoolean( idoldStyle, false );
                    var idfractions = stringIDToTypeID( "fractions" );
                    desc138.putBoolean( idfractions, false );
                    var idordinals = stringIDToTypeID( "ordinals" );
                    desc138.putBoolean( idordinals, false );
                    var idswash = stringIDToTypeID( "swash" );
                    desc138.putBoolean( idswash, false );
                    var idtitling = stringIDToTypeID( "titling" );
                    desc138.putBoolean( idtitling, false );
                    var idconnectionForms = stringIDToTypeID( "connectionForms" );
                    desc138.putBoolean( idconnectionForms, true );
                    var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                    desc138.putBoolean( idstylisticAlternates, false );
                    var idornaments = stringIDToTypeID( "ornaments" );
                    desc138.putBoolean( idornaments, false );
                    var idfigureStyle = stringIDToTypeID( "figureStyle" );
                    var idfigureStyle = stringIDToTypeID( "figureStyle" );
                    var idNrml = charIDToTypeID( "Nrml" );
                    desc138.putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                    var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                    desc138.putBoolean( idproportionalMetrics, false );
                    var idkana = stringIDToTypeID( "kana" );
                    desc138.putBoolean( idkana, false );
                    var iditalics = stringIDToTypeID( "italics" );
                    desc138.putBoolean( iditalics, false );
                    var idruby = stringIDToTypeID( "ruby" );
                    desc138.putBoolean( idruby, false );
                    var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                    var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                    var idwithStream = stringIDToTypeID( "withStream" );
                    desc138.putEnumerated( idbaselineDirection, idbaselineDirection, idwithStream );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                    desc138.putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                    var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                    var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                    var iddefaultForm = stringIDToTypeID( "defaultForm" );
                    desc138.putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
                    var idmojiZume = stringIDToTypeID( "mojiZume" );
                    desc138.putDouble( idmojiZume, 0.000000 );
                    var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                    var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                    var idroman = stringIDToTypeID( "roman" );
                    desc138.putEnumerated( idgridAlignment, idgridAlignment, idroman );
                    var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                    desc138.putBoolean( idenableWariChu, false );
                    var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                    desc138.putInteger( idwariChuCount, 2 );
                    var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                    desc138.putInteger( idwariChuLineGap, 0 );
                    var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                    desc138.putDouble( idwariChuScale, 0.500000 );
                    var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                    desc138.putInteger( idwariChuWidow, 2 );
                    var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                    desc138.putInteger( idwariChuOrphan, 2 );
                    var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                    var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                    var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                    desc138.putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                    var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                    desc138.putInteger( idtcyUpDown, 0 );
                    var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                    desc138.putInteger( idtcyLeftRight, 0 );
                    var idleftAki = stringIDToTypeID( "leftAki" );
                    desc138.putDouble( idleftAki, -1.000000 );
                    var idrightAki = stringIDToTypeID( "rightAki" );
                    desc138.putDouble( idrightAki, -1.000000 );
                    var idjiDori = stringIDToTypeID( "jiDori" );
                    desc138.putInteger( idjiDori, 0 );
                    var idnoBreak = stringIDToTypeID( "noBreak" );
                    desc138.putBoolean( idnoBreak, false );
                    var idClr = charIDToTypeID( "Clr " );
                        var desc139 = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc139.putDouble( idRd, 0.999600 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc139.putDouble( idGrn, 0.991950 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc139.putDouble( idBl, 0.971550 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc138.putObject( idClr, idRGBC, desc139 );
                    var idstrokeColor = stringIDToTypeID( "strokeColor" );
                        var desc140 = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc140.putDouble( idRd, 0.000000 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc140.putDouble( idGrn, 0.000000 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc140.putDouble( idBl, 0.000000 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc138.putObject( idstrokeColor, idRGBC, desc140 );
                    var idFl = charIDToTypeID( "Fl  " );
                    desc138.putBoolean( idFl, true );
                    var idStrk = charIDToTypeID( "Strk" );
                    desc138.putBoolean( idStrk, false );
                    var idfillFirst = stringIDToTypeID( "fillFirst" );
                    desc138.putBoolean( idfillFirst, false );
                    var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                    desc138.putBoolean( idfillOverPrint, false );
                    var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                    desc138.putBoolean( idstrokeOverPrint, false );
                    var idlineCap = stringIDToTypeID( "lineCap" );
                    var idlineCap = stringIDToTypeID( "lineCap" );
                    var idbuttCap = stringIDToTypeID( "buttCap" );
                    desc138.putEnumerated( idlineCap, idlineCap, idbuttCap );
                    var idlineJoin = stringIDToTypeID( "lineJoin" );
                    var idlineJoin = stringIDToTypeID( "lineJoin" );
                    var idmiterJoin = stringIDToTypeID( "miterJoin" );
                    desc138.putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                    var idlineWidth = stringIDToTypeID( "lineWidth" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc138.putUnitDouble( idlineWidth, idPnt, 0.009999 );
                    var idmiterLimit = stringIDToTypeID( "miterLimit" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc138.putUnitDouble( idmiterLimit, idPnt, 0.009999 );
                    var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                    desc138.putDouble( idlineDashoffset, 0.000000 );
                var idTxtS = charIDToTypeID( "TxtS" );
                desc137.putObject( idTxtS, idTxtS, desc138 );
            var idTxtt = charIDToTypeID( "Txtt" );
            list12.putObject( idTxtt, desc137 );
        desc120.putList( idTxtt, list12 );
        var idparagraphStyleRange = stringIDToTypeID( "paragraphStyleRange" );
            var list13 = new ActionList();
                var desc141 = new ActionDescriptor();
                var idFrom = charIDToTypeID( "From" );
                desc141.putInteger( idFrom, 0 );
                var idT = charIDToTypeID( "T   " );
                desc141.putInteger( idT, inputString.length );
                var idparagraphStyle = stringIDToTypeID( "paragraphStyle" );
                    var desc142 = new ActionDescriptor();
                    var idAlgn = charIDToTypeID( "Algn" );
                    var idAlg = charIDToTypeID( "Alg " );
                    var idLeft = charIDToTypeID( "Left" );
                    desc142.putEnumerated( idAlgn, idAlg, idLeft );
                    var idfirstLineIndent = stringIDToTypeID( "firstLineIndent" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc142.putUnitDouble( idfirstLineIndent, idPnt, 0.000000 );
                    var idstartIndent = stringIDToTypeID( "startIndent" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc142.putUnitDouble( idstartIndent, idPnt, 0.000000 );
                    var idendIndent = stringIDToTypeID( "endIndent" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc142.putUnitDouble( idendIndent, idPnt, 0.000000 );
                    var idspaceBefore = stringIDToTypeID( "spaceBefore" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc142.putUnitDouble( idspaceBefore, idPnt, 16.428175 );
                    var idspaceAfter = stringIDToTypeID( "spaceAfter" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc142.putUnitDouble( idspaceAfter, idPnt, 0.000000 );
                    var iddropCapMultiplier = stringIDToTypeID( "dropCapMultiplier" );
                    desc142.putInteger( iddropCapMultiplier, 1 );
                    var idautoLeadingPercentage = stringIDToTypeID( "autoLeadingPercentage" );
                    desc142.putDouble( idautoLeadingPercentage, 1.200000 );
                    var idleadingType = stringIDToTypeID( "leadingType" );
                    var idleadingType = stringIDToTypeID( "leadingType" );
                    var idleadingBelow = stringIDToTypeID( "leadingBelow" );
                    desc142.putEnumerated( idleadingType, idleadingType, idleadingBelow );
                    var idhyphenate = stringIDToTypeID( "hyphenate" );
                    desc142.putBoolean( idhyphenate, false );
                    var idhyphenateWordSize = stringIDToTypeID( "hyphenateWordSize" );
                    desc142.putInteger( idhyphenateWordSize, 6 );
                    var idhyphenatePreLength = stringIDToTypeID( "hyphenatePreLength" );
                    desc142.putInteger( idhyphenatePreLength, 2 );
                    var idhyphenatePostLength = stringIDToTypeID( "hyphenatePostLength" );
                    desc142.putInteger( idhyphenatePostLength, 2 );
                    var idhyphenateLimit = stringIDToTypeID( "hyphenateLimit" );
                    desc142.putInteger( idhyphenateLimit, 0 );
                    var idhyphenationZone = stringIDToTypeID( "hyphenationZone" );
                    desc142.putDouble( idhyphenationZone, 36.000000 );
                    var idhyphenateCapitalized = stringIDToTypeID( "hyphenateCapitalized" );
                    desc142.putBoolean( idhyphenateCapitalized, true );
                    var idhyphenationPreference = stringIDToTypeID( "hyphenationPreference" );
                    desc142.putDouble( idhyphenationPreference, 0.500000 );
                    var idjustificationWordMinimum = stringIDToTypeID( "justificationWordMinimum" );
                    desc142.putDouble( idjustificationWordMinimum, 0.800000 );
                    var idjustificationWordDesired = stringIDToTypeID( "justificationWordDesired" );
                    desc142.putDouble( idjustificationWordDesired, 1.000000 );
                    var idjustificationWordMaximum = stringIDToTypeID( "justificationWordMaximum" );
                    desc142.putDouble( idjustificationWordMaximum, 1.330000 );
                    var idjustificationLetterMinimum = stringIDToTypeID( "justificationLetterMinimum" );
                    desc142.putDouble( idjustificationLetterMinimum, 0.000000 );
                    var idjustificationLetterDesired = stringIDToTypeID( "justificationLetterDesired" );
                    desc142.putDouble( idjustificationLetterDesired, 0.000000 );
                    var idjustificationLetterMaximum = stringIDToTypeID( "justificationLetterMaximum" );
                    desc142.putDouble( idjustificationLetterMaximum, 0.000000 );
                    var idjustificationGlyphMinimum = stringIDToTypeID( "justificationGlyphMinimum" );
                    desc142.putDouble( idjustificationGlyphMinimum, 1.000000 );
                    var idjustificationGlyphDesired = stringIDToTypeID( "justificationGlyphDesired" );
                    desc142.putDouble( idjustificationGlyphDesired, 1.000000 );
                    var idjustificationGlyphMaximum = stringIDToTypeID( "justificationGlyphMaximum" );
                    desc142.putDouble( idjustificationGlyphMaximum, 1.000000 );
                    var idsingleWordJustification = stringIDToTypeID( "singleWordJustification" );
                    var idAlg = charIDToTypeID( "Alg " );
                    var idJstA = charIDToTypeID( "JstA" );
                    desc142.putEnumerated( idsingleWordJustification, idAlg, idJstA );
                    var idhangingRoman = stringIDToTypeID( "hangingRoman" );
                    desc142.putBoolean( idhangingRoman, false );
                    var idautoTCY = stringIDToTypeID( "autoTCY" );
                    desc142.putInteger( idautoTCY, 1 );
                    var idkeepTogether = stringIDToTypeID( "keepTogether" );
                    desc142.putBoolean( idkeepTogether, false );
                    var idburasagari = stringIDToTypeID( "burasagari" );
                    var idburasagari = stringIDToTypeID( "burasagari" );
                    var idburasagariNone = stringIDToTypeID( "burasagariNone" );
                    desc142.putEnumerated( idburasagari, idburasagari, idburasagariNone );
                    var idpreferredKinsokuOrder = stringIDToTypeID( "preferredKinsokuOrder" );
                    var idpreferredKinsokuOrder = stringIDToTypeID( "preferredKinsokuOrder" );
                    var idpushIn = stringIDToTypeID( "pushIn" );
                    desc142.putEnumerated( idpreferredKinsokuOrder, idpreferredKinsokuOrder, idpushIn );
                    var idkurikaeshiMojiShori = stringIDToTypeID( "kurikaeshiMojiShori" );
                    desc142.putBoolean( idkurikaeshiMojiShori, false );
                    var idtextEveryLineComposer = stringIDToTypeID( "textEveryLineComposer" );
                    desc142.putBoolean( idtextEveryLineComposer, false );
                    var iddefaultTabWidth = stringIDToTypeID( "defaultTabWidth" );
                    desc142.putDouble( iddefaultTabWidth, 36.000000 );
                    var iddefaultStyle = stringIDToTypeID( "defaultStyle" );
                        var desc143 = new ActionDescriptor();
                        var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                        desc143.putString( idfontPostScriptName, "MagicSymbols2008" );
                        var idFntN = charIDToTypeID( "FntN" );
                        desc143.putString( idFntN, "Magic Symbols 2008" );
                        var idFntS = charIDToTypeID( "FntS" );
                        desc143.putString( idFntS, "Regular" );
                        var idScrp = charIDToTypeID( "Scrp" );
                        desc143.putInteger( idScrp, 0 );
                        var idFntT = charIDToTypeID( "FntT" );
                        desc143.putInteger( idFntT, 1 );
                        var idSz = charIDToTypeID( "Sz  " );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc143.putUnitDouble( idSz, idPnt, 11.998500 );
                        var idHrzS = charIDToTypeID( "HrzS" );
                        desc143.putDouble( idHrzS, 100.000000 );
                        var idVrtS = charIDToTypeID( "VrtS" );
                        desc143.putDouble( idVrtS, 100.000000 );
                        var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                        desc143.putBoolean( idsyntheticBold, false );
                        var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                        desc143.putBoolean( idsyntheticItalic, false );
                        var idautoLeading = stringIDToTypeID( "autoLeading" );
                        desc143.putBoolean( idautoLeading, false );
                        var idTrck = charIDToTypeID( "Trck" );
                        desc143.putInteger( idTrck, 0 );
                        var idBsln = charIDToTypeID( "Bsln" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc143.putUnitDouble( idBsln, idPnt, 0.000000 );
                        var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                        desc143.putDouble( idcharacterRotation, 0.000000 );
                        var idAtKr = charIDToTypeID( "AtKr" );
                        var idAtKr = charIDToTypeID( "AtKr" );
                        var idmetricsKern = stringIDToTypeID( "metricsKern" );
                        desc143.putEnumerated( idAtKr, idAtKr, idmetricsKern );
                        var idfontCaps = stringIDToTypeID( "fontCaps" );
                        var idfontCaps = stringIDToTypeID( "fontCaps" );
                        var idNrml = charIDToTypeID( "Nrml" );
                        desc143.putEnumerated( idfontCaps, idfontCaps, idNrml );
                        var idbaseline = stringIDToTypeID( "baseline" );
                        var idbaseline = stringIDToTypeID( "baseline" );
                        var idNrml = charIDToTypeID( "Nrml" );
                        desc143.putEnumerated( idbaseline, idbaseline, idNrml );
                        var idotbaseline = stringIDToTypeID( "otbaseline" );
                        var idotbaseline = stringIDToTypeID( "otbaseline" );
                        var idNrml = charIDToTypeID( "Nrml" );
                        desc143.putEnumerated( idotbaseline, idotbaseline, idNrml );
                        var idstrikethrough = stringIDToTypeID( "strikethrough" );
                        var idstrikethrough = stringIDToTypeID( "strikethrough" );
                        var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                        desc143.putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                        var idUndl = charIDToTypeID( "Undl" );
                        var idUndl = charIDToTypeID( "Undl" );
                        var idunderlineOff = stringIDToTypeID( "underlineOff" );
                        desc143.putEnumerated( idUndl, idUndl, idunderlineOff );
                        var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc143.putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                        var idligature = stringIDToTypeID( "ligature" );
                        desc143.putBoolean( idligature, true );
                        var idaltligature = stringIDToTypeID( "altligature" );
                        desc143.putBoolean( idaltligature, false );
                        var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                        desc143.putBoolean( idcontextualLigatures, false );
                        var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                        desc143.putBoolean( idalternateLigatures, false );
                        var idoldStyle = stringIDToTypeID( "oldStyle" );
                        desc143.putBoolean( idoldStyle, false );
                        var idfractions = stringIDToTypeID( "fractions" );
                        desc143.putBoolean( idfractions, false );
                        var idordinals = stringIDToTypeID( "ordinals" );
                        desc143.putBoolean( idordinals, false );
                        var idswash = stringIDToTypeID( "swash" );
                        desc143.putBoolean( idswash, false );
                        var idtitling = stringIDToTypeID( "titling" );
                        desc143.putBoolean( idtitling, false );
                        var idconnectionForms = stringIDToTypeID( "connectionForms" );
                        desc143.putBoolean( idconnectionForms, false );
                        var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                        desc143.putBoolean( idstylisticAlternates, false );
                        var idornaments = stringIDToTypeID( "ornaments" );
                        desc143.putBoolean( idornaments, false );
                        var idfigureStyle = stringIDToTypeID( "figureStyle" );
                        var idfigureStyle = stringIDToTypeID( "figureStyle" );
                        var idNrml = charIDToTypeID( "Nrml" );
                        desc143.putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                        var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                        desc143.putBoolean( idproportionalMetrics, false );
                        var idkana = stringIDToTypeID( "kana" );
                        desc143.putBoolean( idkana, false );
                        var iditalics = stringIDToTypeID( "italics" );
                        desc143.putBoolean( iditalics, false );
                        var idruby = stringIDToTypeID( "ruby" );
                        desc143.putBoolean( idruby, false );
                        var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                        var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                        var idrotated = stringIDToTypeID( "rotated" );
                        desc143.putEnumerated( idbaselineDirection, idbaselineDirection, idrotated );
                        var idtextLanguage = stringIDToTypeID( "textLanguage" );
                        var idtextLanguage = stringIDToTypeID( "textLanguage" );
                        var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                        desc143.putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                        var idmojiZume = stringIDToTypeID( "mojiZume" );
                        desc143.putDouble( idmojiZume, 0.000000 );
                        var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                        var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                        var idroman = stringIDToTypeID( "roman" );
                        desc143.putEnumerated( idgridAlignment, idgridAlignment, idroman );
                        var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                        desc143.putBoolean( idenableWariChu, false );
                        var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                        desc143.putInteger( idwariChuCount, 2 );
                        var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                        desc143.putInteger( idwariChuLineGap, 0 );
                        var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                        desc143.putDouble( idwariChuScale, 0.500000 );
                        var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                        desc143.putInteger( idwariChuWidow, 2 );
                        var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                        desc143.putInteger( idwariChuOrphan, 2 );
                        var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                        var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                        var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                        desc143.putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                        var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                        desc143.putInteger( idtcyUpDown, 0 );
                        var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                        desc143.putInteger( idtcyLeftRight, 0 );
                        var idleftAki = stringIDToTypeID( "leftAki" );
                        desc143.putDouble( idleftAki, -1.000000 );
                        var idrightAki = stringIDToTypeID( "rightAki" );
                        desc143.putDouble( idrightAki, -1.000000 );
                        var idjiDori = stringIDToTypeID( "jiDori" );
                        desc143.putInteger( idjiDori, 0 );
                        var idnoBreak = stringIDToTypeID( "noBreak" );
                        desc143.putBoolean( idnoBreak, false );
                        var idClr = charIDToTypeID( "Clr " );
                            var desc144 = new ActionDescriptor();
                            var idRd = charIDToTypeID( "Rd  " );
                            desc144.putDouble( idRd, 0.000000 );
                            var idGrn = charIDToTypeID( "Grn " );
                            desc144.putDouble( idGrn, 0.000000 );
                            var idBl = charIDToTypeID( "Bl  " );
                            desc144.putDouble( idBl, 0.000000 );
                        var idRGBC = charIDToTypeID( "RGBC" );
                        desc143.putObject( idClr, idRGBC, desc144 );
                        var idstrokeColor = stringIDToTypeID( "strokeColor" );
                            var desc145 = new ActionDescriptor();
                            var idRd = charIDToTypeID( "Rd  " );
                            desc145.putDouble( idRd, 0.000000 );
                            var idGrn = charIDToTypeID( "Grn " );
                            desc145.putDouble( idGrn, 0.000000 );
                            var idBl = charIDToTypeID( "Bl  " );
                            desc145.putDouble( idBl, 0.000000 );
                        var idRGBC = charIDToTypeID( "RGBC" );
                        desc143.putObject( idstrokeColor, idRGBC, desc145 );
                        var idFl = charIDToTypeID( "Fl  " );
                        desc143.putBoolean( idFl, true );
                        var idStrk = charIDToTypeID( "Strk" );
                        desc143.putBoolean( idStrk, false );
                        var idfillFirst = stringIDToTypeID( "fillFirst" );
                        desc143.putBoolean( idfillFirst, true );
                        var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                        desc143.putBoolean( idfillOverPrint, false );
                        var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                        desc143.putBoolean( idstrokeOverPrint, false );
                        var idlineCap = stringIDToTypeID( "lineCap" );
                        var idlineCap = stringIDToTypeID( "lineCap" );
                        var idbuttCap = stringIDToTypeID( "buttCap" );
                        desc143.putEnumerated( idlineCap, idlineCap, idbuttCap );
                        var idlineJoin = stringIDToTypeID( "lineJoin" );
                        var idlineJoin = stringIDToTypeID( "lineJoin" );
                        var idmiterJoin = stringIDToTypeID( "miterJoin" );
                        desc143.putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                        var idlineWidth = stringIDToTypeID( "lineWidth" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc143.putUnitDouble( idlineWidth, idPnt, 0.999875 );
                        var idmiterLimit = stringIDToTypeID( "miterLimit" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc143.putUnitDouble( idmiterLimit, idPnt, 3.999500 );
                        var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                        desc143.putDouble( idlineDashoffset, 0.000000 );
                    var idTxtS = charIDToTypeID( "TxtS" );
                    desc142.putObject( iddefaultStyle, idTxtS, desc143 );
                var idparagraphStyle = stringIDToTypeID( "paragraphStyle" );
                desc141.putObject( idparagraphStyle, idparagraphStyle, desc142 );
            var idparagraphStyleRange = stringIDToTypeID( "paragraphStyleRange" );
            list13.putObject( idparagraphStyleRange, desc141 );
        desc120.putList( idparagraphStyleRange, list13 );
        var idkerningRange = stringIDToTypeID( "kerningRange" );
            var list14 = new ActionList();
        desc120.putList( idkerningRange, list14 );
    var idTxLr = charIDToTypeID( "TxLr" );
    desc119.putObject( idT, idTxLr, desc120 );
executeAction( idsetd, desc119, DialogModes.NO );
}
